// Auto-generated. Do not edit!

// (in-package ff_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ControlState = require('./ControlState.js');

//-----------------------------------------------------------

class ControlFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.index = null;
      this.setpoint = null;
      this.error_position = null;
      this.error_attitude = null;
      this.error_velocity = null;
      this.error_omega = null;
    }
    else {
      if (initObj.hasOwnProperty('index')) {
        this.index = initObj.index
      }
      else {
        this.index = 0;
      }
      if (initObj.hasOwnProperty('setpoint')) {
        this.setpoint = initObj.setpoint
      }
      else {
        this.setpoint = new ControlState();
      }
      if (initObj.hasOwnProperty('error_position')) {
        this.error_position = initObj.error_position
      }
      else {
        this.error_position = 0.0;
      }
      if (initObj.hasOwnProperty('error_attitude')) {
        this.error_attitude = initObj.error_attitude
      }
      else {
        this.error_attitude = 0.0;
      }
      if (initObj.hasOwnProperty('error_velocity')) {
        this.error_velocity = initObj.error_velocity
      }
      else {
        this.error_velocity = 0.0;
      }
      if (initObj.hasOwnProperty('error_omega')) {
        this.error_omega = initObj.error_omega
      }
      else {
        this.error_omega = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ControlFeedback
    // Serialize message field [index]
    bufferOffset = _serializer.uint32(obj.index, buffer, bufferOffset);
    // Serialize message field [setpoint]
    bufferOffset = ControlState.serialize(obj.setpoint, buffer, bufferOffset);
    // Serialize message field [error_position]
    bufferOffset = _serializer.float32(obj.error_position, buffer, bufferOffset);
    // Serialize message field [error_attitude]
    bufferOffset = _serializer.float32(obj.error_attitude, buffer, bufferOffset);
    // Serialize message field [error_velocity]
    bufferOffset = _serializer.float32(obj.error_velocity, buffer, bufferOffset);
    // Serialize message field [error_omega]
    bufferOffset = _serializer.float32(obj.error_omega, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ControlFeedback
    let len;
    let data = new ControlFeedback(null);
    // Deserialize message field [index]
    data.index = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [setpoint]
    data.setpoint = ControlState.deserialize(buffer, bufferOffset);
    // Deserialize message field [error_position]
    data.error_position = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [error_attitude]
    data.error_attitude = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [error_velocity]
    data.error_velocity = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [error_omega]
    data.error_omega = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 180;
  }

  static datatype() {
    // Returns string type for a message object
    return 'ff_msgs/ControlFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '1e2dd668bd0bc39b8d613faad6d7b071';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    uint32 index                                # Index being processed
    
    ff_msgs/ControlState setpoint               # Current setpoint
    
    float32 error_position                      # Position error
    float32 error_attitude                      # Attitude error
    float32 error_velocity                      # Velocity error
    float32 error_omega                         # Omega error
    
    
    ================================================================================
    MSG: ff_msgs/ControlState
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    # 
    # All rights reserved.
    # 
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    # 
    #     http://www.apache.org/licenses/LICENSE-2.0
    # 
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # Full state vector containing Time, Pose, Vel, and Accel
    # 
    # when {time}
    # flight_mode {string} - disctates, gains, tolerances, etc.
    # pose {Point position, Quaternion orientation}
    # twist {Vector3 linear, Vector3 angular}
    # accel {Vector3 linear, Vector3 angular}
    
    time when
    geometry_msgs/Pose pose
    geometry_msgs/Twist twist
    geometry_msgs/Twist accel
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: geometry_msgs/Twist
    # This expresses velocity in free space broken into its linear and angular parts.
    Vector3  linear
    Vector3  angular
    
    ================================================================================
    MSG: geometry_msgs/Vector3
    # This represents a vector in free space. 
    # It is only meant to represent a direction. Therefore, it does not
    # make sense to apply a translation to it (e.g., when applying a 
    # generic rigid transformation to a Vector3, tf2 will only apply the
    # rotation). If you want your data to be translatable too, use the
    # geometry_msgs/Point message instead.
    
    float64 x
    float64 y
    float64 z
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ControlFeedback(null);
    if (msg.index !== undefined) {
      resolved.index = msg.index;
    }
    else {
      resolved.index = 0
    }

    if (msg.setpoint !== undefined) {
      resolved.setpoint = ControlState.Resolve(msg.setpoint)
    }
    else {
      resolved.setpoint = new ControlState()
    }

    if (msg.error_position !== undefined) {
      resolved.error_position = msg.error_position;
    }
    else {
      resolved.error_position = 0.0
    }

    if (msg.error_attitude !== undefined) {
      resolved.error_attitude = msg.error_attitude;
    }
    else {
      resolved.error_attitude = 0.0
    }

    if (msg.error_velocity !== undefined) {
      resolved.error_velocity = msg.error_velocity;
    }
    else {
      resolved.error_velocity = 0.0
    }

    if (msg.error_omega !== undefined) {
      resolved.error_omega = msg.error_omega;
    }
    else {
      resolved.error_omega = 0.0
    }

    return resolved;
    }
};

module.exports = ControlFeedback;
