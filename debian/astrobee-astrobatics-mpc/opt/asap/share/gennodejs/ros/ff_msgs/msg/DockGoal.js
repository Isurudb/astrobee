// Auto-generated. Do not edit!

// (in-package ff_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class DockGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.command = null;
      this.berth = null;
      this.return_dock = null;
    }
    else {
      if (initObj.hasOwnProperty('command')) {
        this.command = initObj.command
      }
      else {
        this.command = 0;
      }
      if (initObj.hasOwnProperty('berth')) {
        this.berth = initObj.berth
      }
      else {
        this.berth = 0;
      }
      if (initObj.hasOwnProperty('return_dock')) {
        this.return_dock = initObj.return_dock
      }
      else {
        this.return_dock = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type DockGoal
    // Serialize message field [command]
    bufferOffset = _serializer.uint8(obj.command, buffer, bufferOffset);
    // Serialize message field [berth]
    bufferOffset = _serializer.uint8(obj.berth, buffer, bufferOffset);
    // Serialize message field [return_dock]
    bufferOffset = _serializer.bool(obj.return_dock, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type DockGoal
    let len;
    let data = new DockGoal(null);
    // Deserialize message field [command]
    data.command = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [berth]
    data.berth = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [return_dock]
    data.return_dock = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 3;
  }

  static datatype() {
    // Returns string type for a message object
    return 'ff_msgs/DockGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '84df250ded700e76e456253a21c96ba5';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    # 
    # All rights reserved.
    # 
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    # 
    #     http://www.apache.org/licenses/LICENSE-2.0
    # 
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # Dock action for the Docking node
    
    # Do we want to dock or undock
    uint8 command
    uint8 DOCK    = 1
    uint8 UNDOCK  = 2
    
    # Which berth (values must match)
    uint8 berth
    uint8 BERTH_UNKNOWN = 0 # When we undock, we don't know what berth we are in
    uint8 BERTH_1       = 1
    uint8 BERTH_2       = 2
    
    # Return to dock
    bool return_dock
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new DockGoal(null);
    if (msg.command !== undefined) {
      resolved.command = msg.command;
    }
    else {
      resolved.command = 0
    }

    if (msg.berth !== undefined) {
      resolved.berth = msg.berth;
    }
    else {
      resolved.berth = 0
    }

    if (msg.return_dock !== undefined) {
      resolved.return_dock = msg.return_dock;
    }
    else {
      resolved.return_dock = false
    }

    return resolved;
    }
};

// Constants for message
DockGoal.Constants = {
  DOCK: 1,
  UNDOCK: 2,
  BERTH_UNKNOWN: 0,
  BERTH_1: 1,
  BERTH_2: 2,
}

module.exports = DockGoal;
