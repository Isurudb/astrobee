// Auto-generated. Do not edit!

// (in-package ff_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ArmActionGoal = require('./ArmActionGoal.js');
let ArmActionResult = require('./ArmActionResult.js');
let ArmActionFeedback = require('./ArmActionFeedback.js');

//-----------------------------------------------------------

class ArmAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new ArmActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new ArmActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new ArmActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ArmAction
    // Serialize message field [action_goal]
    bufferOffset = ArmActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = ArmActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = ArmActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ArmAction
    let len;
    let data = new ArmAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = ArmActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = ArmActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = ArmActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += ArmActionGoal.getMessageSize(object.action_goal);
    length += ArmActionResult.getMessageSize(object.action_result);
    length += ArmActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'ff_msgs/ArmAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e7d0e0fd97a05b48fe09d04a86eb6863';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    ArmActionGoal action_goal
    ArmActionResult action_result
    ArmActionFeedback action_feedback
    
    ================================================================================
    MSG: ff_msgs/ArmActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    ArmGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: ff_msgs/ArmGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    #
    # All rights reserved.
    #
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # This message describes the ARM action offered by the PERCHING ARM
    
    uint8 command                                 # What to do
    uint8 ARM_STOP            = 0                 # Stop the arm (vel = 0)
    uint8 ARM_DEPLOY          = 1                 # Deploy the arm
    uint8 ARM_STOW            = 2                 # Retract the arm
    uint8 ARM_PAN             = 3                 # Pan the arm
    uint8 ARM_TILT            = 4                 # Tilt the arm
    uint8 ARM_MOVE            = 5                 # Pan and tilt the
    uint8 GRIPPER_SET         = 6                 # Set the gripper value
    uint8 GRIPPER_OPEN        = 7                 # Open the gripper
    uint8 GRIPPER_CLOSE       = 8                 # Close the gripper
    uint8 DISABLE_SERVO       = 9                 # Disable the servos
    
    float32 pan                                   # PAN from -90 to +90
    float32 tilt                                  # TILT from -120 to +90
    float32 gripper                               # SET from 20 to 45
    
    
    ================================================================================
    MSG: ff_msgs/ArmActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    ArmResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: ff_msgs/ArmResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # Machine-readable reseult code
    int32 response
    int32 SUCCESS             =  1                # Successfully completed
    int32 PREEMPTED           =  0                # Action was preempted
    int32 INVALID_COMMAND     = -1                # Invalid command
    int32 BAD_TILT_VALUE      = -2                # Invalid value for tilt
    int32 BAD_PAN_VALUE       = -3                # Invalid value for pan
    int32 BAD_GRIPPER_VALUE   = -4                # Invalid value for gripper
    int32 NOT_ALLOWED         = -5                # Not allowed
    int32 TILT_FAILED         = -6                # Tilt command failed
    int32 PAN_FAILED          = -7                # Pan command failed
    int32 GRIPPER_FAILED      = -8                # Gripper command failed
    int32 COMMUNICATION_ERROR = -9                # Cannot communicate with arm
    int32 COLLISION_AVOIDED   = -10               # No panning when tilt < 90
    int32 ENABLE_FAILED       = -11               # Cannot enable the servos
    int32 DISABLE_FAILED      = -12               # Cannot disable the servos
    int32 CALIBRATE_FAILED    = -13               # Cannot calibrate the gripper
    int32 NO_GOAL             = -14               # Unknown call to calibration
    
    # Human readable FSM result for debugging
    string fsm_result
    
    
    ================================================================================
    MSG: ff_msgs/ArmActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    ArmFeedback feedback
    
    ================================================================================
    MSG: ff_msgs/ArmFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    ff_msgs/ArmState state                        # Complete state
    
    float32 pan                                   # Current PAN value
    float32 tilt                                  # Current TILT value
    float32 gripper                               # Current GRIPPER value
    
    
    ================================================================================
    MSG: ff_msgs/ArmState
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    #
    # All rights reserved.
    #
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # The state of the arm behavior
    
    # Header with timestamp
    std_msgs/Header header
    
    # Tee current state
    int8 state                         # Current state
    int8 INITIALIZING        = 0       # Waiting on child services, actions, etc.
    int8 UNKNOWN             = 1       # Waiting on feedback from driver
    int8 STOWED              = 2       # The arm is stowed
    int8 DEPLOYED            = 3       # The arm is deployed
    int8 SETTING             = 4       # The gripper is being set to a value
    int8 PANNING             = 5       # We are panning as part of a move
    int8 TILTING             = 6       # We are tilting as part of a move
    int8 STOWING_SETTING     = 7       # We are closing the gripper for stowing
    int8 STOWING_PANNING     = 8       # We are panning to zero for stowing
    int8 STOWING_TILTING     = 9       # We are tilting to zero for stowing
    int8 DEPLOYING_PANNING   = 10      # We are panning to zero for stowing
    int8 DEPLOYING_TILTING   = 11      # We are tilting to zero for stowing
    int8 CALIBRATING         = 12      # We are calibrating the gripper
    
    # A human readble version of the (event) -> [state] transition
    string fsm_event
    string fsm_state
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ArmAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = ArmActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new ArmActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = ArmActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new ArmActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = ArmActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new ArmActionFeedback()
    }

    return resolved;
    }
};

module.exports = ArmAction;
