// Auto-generated. Do not edit!

// (in-package ff_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let MotionState = require('./MotionState.js');
let ControlFeedback = require('./ControlFeedback.js');

//-----------------------------------------------------------

class MotionFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.state = null;
      this.progress = null;
      this.perc_complete = null;
      this.secs_remaining = null;
    }
    else {
      if (initObj.hasOwnProperty('state')) {
        this.state = initObj.state
      }
      else {
        this.state = new MotionState();
      }
      if (initObj.hasOwnProperty('progress')) {
        this.progress = initObj.progress
      }
      else {
        this.progress = new ControlFeedback();
      }
      if (initObj.hasOwnProperty('perc_complete')) {
        this.perc_complete = initObj.perc_complete
      }
      else {
        this.perc_complete = 0.0;
      }
      if (initObj.hasOwnProperty('secs_remaining')) {
        this.secs_remaining = initObj.secs_remaining
      }
      else {
        this.secs_remaining = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MotionFeedback
    // Serialize message field [state]
    bufferOffset = MotionState.serialize(obj.state, buffer, bufferOffset);
    // Serialize message field [progress]
    bufferOffset = ControlFeedback.serialize(obj.progress, buffer, bufferOffset);
    // Serialize message field [perc_complete]
    bufferOffset = _serializer.float32(obj.perc_complete, buffer, bufferOffset);
    // Serialize message field [secs_remaining]
    bufferOffset = _serializer.float32(obj.secs_remaining, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MotionFeedback
    let len;
    let data = new MotionFeedback(null);
    // Deserialize message field [state]
    data.state = MotionState.deserialize(buffer, bufferOffset);
    // Deserialize message field [progress]
    data.progress = ControlFeedback.deserialize(buffer, bufferOffset);
    // Deserialize message field [perc_complete]
    data.perc_complete = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [secs_remaining]
    data.secs_remaining = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += MotionState.getMessageSize(object.state);
    return length + 188;
  }

  static datatype() {
    // Returns string type for a message object
    return 'ff_msgs/MotionFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a70f7ffb0db5b74cf7c14491a515651c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # The state of the teleop command
    ff_msgs/MotionState state
    
    # Control progress
    ff_msgs/ControlFeedback progress
    
    # Planner progress
    float32 perc_complete
    float32 secs_remaining
    
    
    ================================================================================
    MSG: ff_msgs/MotionState
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    #
    # All rights reserved.
    #
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # Locked topic that registers updates to the internal dock state
    
    # Header with timestamp
    std_msgs/Header header
    
    # The state of the mobility subsystem
    int8 state
    int8 INITIALIZING        = 0
    int8 IDLE                = 1
    int8 STOPPED             = 2
    int8 IDLING              = 3
    int8 STOPPING            = 4
    int8 PREPPING            = 5
    int8 BOOTSTRAPPING       = 6
    int8 PLANNING            = 7
    int8 PREPARING           = 8
    int8 CONTROLLING         = 9
    int8 REPLANNING          = 10
    int8 HALTING             = 11
    int8 REPLAN_WAIT         = 12
    
    # A human readble version of the (event) -> [state] transition
    string fsm_event
    string fsm_state
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: ff_msgs/ControlFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    uint32 index                                # Index being processed
    
    ff_msgs/ControlState setpoint               # Current setpoint
    
    float32 error_position                      # Position error
    float32 error_attitude                      # Attitude error
    float32 error_velocity                      # Velocity error
    float32 error_omega                         # Omega error
    
    
    ================================================================================
    MSG: ff_msgs/ControlState
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    # 
    # All rights reserved.
    # 
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    # 
    #     http://www.apache.org/licenses/LICENSE-2.0
    # 
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # Full state vector containing Time, Pose, Vel, and Accel
    # 
    # when {time}
    # flight_mode {string} - disctates, gains, tolerances, etc.
    # pose {Point position, Quaternion orientation}
    # twist {Vector3 linear, Vector3 angular}
    # accel {Vector3 linear, Vector3 angular}
    
    time when
    geometry_msgs/Pose pose
    geometry_msgs/Twist twist
    geometry_msgs/Twist accel
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: geometry_msgs/Twist
    # This expresses velocity in free space broken into its linear and angular parts.
    Vector3  linear
    Vector3  angular
    
    ================================================================================
    MSG: geometry_msgs/Vector3
    # This represents a vector in free space. 
    # It is only meant to represent a direction. Therefore, it does not
    # make sense to apply a translation to it (e.g., when applying a 
    # generic rigid transformation to a Vector3, tf2 will only apply the
    # rotation). If you want your data to be translatable too, use the
    # geometry_msgs/Point message instead.
    
    float64 x
    float64 y
    float64 z
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MotionFeedback(null);
    if (msg.state !== undefined) {
      resolved.state = MotionState.Resolve(msg.state)
    }
    else {
      resolved.state = new MotionState()
    }

    if (msg.progress !== undefined) {
      resolved.progress = ControlFeedback.Resolve(msg.progress)
    }
    else {
      resolved.progress = new ControlFeedback()
    }

    if (msg.perc_complete !== undefined) {
      resolved.perc_complete = msg.perc_complete;
    }
    else {
      resolved.perc_complete = 0.0
    }

    if (msg.secs_remaining !== undefined) {
      resolved.secs_remaining = msg.secs_remaining;
    }
    else {
      resolved.secs_remaining = 0.0
    }

    return resolved;
    }
};

module.exports = MotionFeedback;
