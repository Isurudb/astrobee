// Auto-generated. Do not edit!

// (in-package ff_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let LocalizationActionGoal = require('./LocalizationActionGoal.js');
let LocalizationActionResult = require('./LocalizationActionResult.js');
let LocalizationActionFeedback = require('./LocalizationActionFeedback.js');

//-----------------------------------------------------------

class LocalizationAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new LocalizationActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new LocalizationActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new LocalizationActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type LocalizationAction
    // Serialize message field [action_goal]
    bufferOffset = LocalizationActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = LocalizationActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = LocalizationActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type LocalizationAction
    let len;
    let data = new LocalizationAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = LocalizationActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = LocalizationActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = LocalizationActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += LocalizationActionGoal.getMessageSize(object.action_goal);
    length += LocalizationActionResult.getMessageSize(object.action_result);
    length += LocalizationActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'ff_msgs/LocalizationAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ec0494140b1dcab54ec73f8ddd70ee1c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    LocalizationActionGoal action_goal
    LocalizationActionResult action_result
    LocalizationActionFeedback action_feedback
    
    ================================================================================
    MSG: ff_msgs/LocalizationActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    LocalizationGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: ff_msgs/LocalizationGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    #
    # All rights reserved.
    #
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # This message is the LOCALIZATION action offered by the LOCALIZATION_MANAGER
    
    uint8 command
    uint8 COMMAND_UNKNOWN             = 0       # Protect against empty message
    uint8 COMMAND_SWITCH_PIPELINE     = 1       # Switch localization pipeline
    uint8 COMMAND_RESET_FILTER        = 2       # Reset the filter
    uint8 COMMAND_ESTIMATE_BIAS       = 3       # Estimate the bias
    
    string pipeline                             # Only needed for switch pipeline
    string PIPELINE_NONE              = no
    string PIPELINE_MAP_LANDMARKS     = ml
    string PIPELINE_AR_TAGS           = ar
    string PIPELINE_HANDRAIL          = hr
    string PIPELINE_PERCH             = pl
    string PIPELINE_TRUTH             = gt
    
    
    ================================================================================
    MSG: ff_msgs/LocalizationActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    LocalizationResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: ff_msgs/LocalizationResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    int32 response
    int32 PIPELINE_ALREADY_ACTIVE     =  2   # We are already on this mode
    int32 SUCCESS                     =  1   # The switch was successful
    int32 PREEMPTED                   =  0   # Preempted by another action goal
    int32 CANCELLED                   = -1   # We canceled our own request
    int32 INVALID_PIPELINE            = -2   # Not a valid pipeline in command
    int32 INVALID_COMMAND             = -3   # Not a valid command type
    int32 FILTER_NOT_IN_USE           = -4   # Reset/bias requires filter
    int32 OPTICAL_FLOW_FAILED         = -5   # Optical flow could not be toggled
    int32 PIPELINE_TOGGLE_FAILED      = -6   # Pipeline could not be toggled
    int32 PIPELINE_USE_FAILED         = -7   # Pipeline could not be used
    int32 PIPELINE_UNSTABLE           = -8   # Pipeline did not go stable
    int32 SET_INPUT_FAILED            = -9   # EKF could not be set to new mode
    int32 ESTIMATE_BIAS_FAILED        = -10  # Estimate bias service call failed
    int32 RESET_FAILED                = -11  # Reset service call failed
    
    # Human readable FSM result for debugging
    string fsm_result
    
    
    ================================================================================
    MSG: ff_msgs/LocalizationActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    LocalizationFeedback feedback
    
    ================================================================================
    MSG: ff_msgs/LocalizationFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # Feedback
    ff_msgs/LocalizationState state
    
    
    ================================================================================
    MSG: ff_msgs/LocalizationState
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    #
    # All rights reserved.
    #
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # The state of the localization system
    
    # Header with timestamp
    std_msgs/Header header
    
    # Tee current state
    int32 state                                 # Current state
    int32 INITIALIZING                    = 0   # Waiting on dependencies
    int32 DISABLED                        = 1   # Localization disabled
    int32 LOCALIZING                      = 2   # Localization enabled
    int32 SWITCH_WAITING_FOR_PIPELINE     = 3   # Waiting for pipeline to stabilize
    int32 SWITCH_WAITING_FOR_FILTER       = 4   # Waiting for filter to stabilize
    int32 BIAS_WAITING_FOR_FILTER         = 5   # Waiting for bias estimation
    int32 RESET_WAITING_FOR_FILTER        = 6   # Waiting for EKF stability
    int32 UNSTABLE                        = 7   # Fallback pipeline unstable
    
    # A human readable version of the (event) -> [state] transition
    string fsm_event
    string fsm_state
    
    # The current localization pipeline being used
    ff_msgs/LocalizationPipeline pipeline
    
    ================================================================================
    MSG: ff_msgs/LocalizationPipeline
    # Copyright (c) 2017, United States Government, as represented by the
    # Administrator of the National Aeronautics and Space Administration.
    #
    # All rights reserved.
    #
    # The Astrobee platform is licensed under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with the
    # License. You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    # License for the specific language governing permissions and limitations
    # under the License.
    #
    # Information about a pipeline
    
    string id                     # Short id for the pipeline
    uint8 mode                    # EKF mode for the pipeline
    string name                   # Long name for the pipe
    bool requires_filter          # Does this pipeline require the EKF
    bool requires_optical_flow    # Does this pipeline require optical flow
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new LocalizationAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = LocalizationActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new LocalizationActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = LocalizationActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new LocalizationActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = LocalizationActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new LocalizationActionFeedback()
    }

    return resolved;
    }
};

module.exports = LocalizationAction;
