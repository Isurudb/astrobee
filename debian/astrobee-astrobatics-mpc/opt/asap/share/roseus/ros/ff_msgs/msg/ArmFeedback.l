;; Auto-generated. Do not edit!


(when (boundp 'ff_msgs::ArmFeedback)
  (if (not (find-package "FF_MSGS"))
    (make-package "FF_MSGS"))
  (shadow 'ArmFeedback (find-package "FF_MSGS")))
(unless (find-package "FF_MSGS::ARMFEEDBACK")
  (make-package "FF_MSGS::ARMFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ArmFeedback.msg.html


(defclass ff_msgs::ArmFeedback
  :super ros::object
  :slots (_state _pan _tilt _gripper ))

(defmethod ff_msgs::ArmFeedback
  (:init
   (&key
    ((:state __state) (instance ff_msgs::ArmState :init))
    ((:pan __pan) 0.0)
    ((:tilt __tilt) 0.0)
    ((:gripper __gripper) 0.0)
    )
   (send-super :init)
   (setq _state __state)
   (setq _pan (float __pan))
   (setq _tilt (float __tilt))
   (setq _gripper (float __gripper))
   self)
  (:state
   (&rest __state)
   (if (keywordp (car __state))
       (send* _state __state)
     (progn
       (if __state (setq _state (car __state)))
       _state)))
  (:pan
   (&optional __pan)
   (if __pan (setq _pan __pan)) _pan)
  (:tilt
   (&optional __tilt)
   (if __tilt (setq _tilt __tilt)) _tilt)
  (:gripper
   (&optional __gripper)
   (if __gripper (setq _gripper __gripper)) _gripper)
  (:serialization-length
   ()
   (+
    ;; ff_msgs/ArmState _state
    (send _state :serialization-length)
    ;; float32 _pan
    4
    ;; float32 _tilt
    4
    ;; float32 _gripper
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; ff_msgs/ArmState _state
       (send _state :serialize s)
     ;; float32 _pan
       (sys::poke _pan (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _tilt
       (sys::poke _tilt (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _gripper
       (sys::poke _gripper (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; ff_msgs/ArmState _state
     (send _state :deserialize buf ptr-) (incf ptr- (send _state :serialization-length))
   ;; float32 _pan
     (setq _pan (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _tilt
     (setq _tilt (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _gripper
     (setq _gripper (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get ff_msgs::ArmFeedback :md5sum-) "2071124ffef61efc1590237720618232")
(setf (get ff_msgs::ArmFeedback :datatype-) "ff_msgs/ArmFeedback")
(setf (get ff_msgs::ArmFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

ff_msgs/ArmState state                        # Complete state

float32 pan                                   # Current PAN value
float32 tilt                                  # Current TILT value
float32 gripper                               # Current GRIPPER value


================================================================================
MSG: ff_msgs/ArmState
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# The state of the arm behavior

# Header with timestamp
std_msgs/Header header

# Tee current state
int8 state                         # Current state
int8 INITIALIZING        = 0       # Waiting on child services, actions, etc.
int8 UNKNOWN             = 1       # Waiting on feedback from driver
int8 STOWED              = 2       # The arm is stowed
int8 DEPLOYED            = 3       # The arm is deployed
int8 SETTING             = 4       # The gripper is being set to a value
int8 PANNING             = 5       # We are panning as part of a move
int8 TILTING             = 6       # We are tilting as part of a move
int8 STOWING_SETTING     = 7       # We are closing the gripper for stowing
int8 STOWING_PANNING     = 8       # We are panning to zero for stowing
int8 STOWING_TILTING     = 9       # We are tilting to zero for stowing
int8 DEPLOYING_PANNING   = 10      # We are panning to zero for stowing
int8 DEPLOYING_TILTING   = 11      # We are tilting to zero for stowing
int8 CALIBRATING         = 12      # We are calibrating the gripper

# A human readble version of the (event) -> [state] transition
string fsm_event
string fsm_state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

")



(provide :ff_msgs/ArmFeedback "2071124ffef61efc1590237720618232")


