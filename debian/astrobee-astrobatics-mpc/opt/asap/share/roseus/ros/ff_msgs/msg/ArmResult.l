;; Auto-generated. Do not edit!


(when (boundp 'ff_msgs::ArmResult)
  (if (not (find-package "FF_MSGS"))
    (make-package "FF_MSGS"))
  (shadow 'ArmResult (find-package "FF_MSGS")))
(unless (find-package "FF_MSGS::ARMRESULT")
  (make-package "FF_MSGS::ARMRESULT"))

(in-package "ROS")
;;//! \htmlinclude ArmResult.msg.html


(intern "*SUCCESS*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*SUCCESS* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*SUCCESS* 1)
(intern "*PREEMPTED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*PREEMPTED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*PREEMPTED* 0)
(intern "*INVALID_COMMAND*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*INVALID_COMMAND* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*INVALID_COMMAND* -1)
(intern "*BAD_TILT_VALUE*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*BAD_TILT_VALUE* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*BAD_TILT_VALUE* -2)
(intern "*BAD_PAN_VALUE*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*BAD_PAN_VALUE* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*BAD_PAN_VALUE* -3)
(intern "*BAD_GRIPPER_VALUE*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*BAD_GRIPPER_VALUE* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*BAD_GRIPPER_VALUE* -4)
(intern "*NOT_ALLOWED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*NOT_ALLOWED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*NOT_ALLOWED* -5)
(intern "*TILT_FAILED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*TILT_FAILED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*TILT_FAILED* -6)
(intern "*PAN_FAILED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*PAN_FAILED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*PAN_FAILED* -7)
(intern "*GRIPPER_FAILED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*GRIPPER_FAILED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*GRIPPER_FAILED* -8)
(intern "*COMMUNICATION_ERROR*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*COMMUNICATION_ERROR* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*COMMUNICATION_ERROR* -9)
(intern "*COLLISION_AVOIDED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*COLLISION_AVOIDED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*COLLISION_AVOIDED* -10)
(intern "*ENABLE_FAILED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*ENABLE_FAILED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*ENABLE_FAILED* -11)
(intern "*DISABLE_FAILED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*DISABLE_FAILED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*DISABLE_FAILED* -12)
(intern "*CALIBRATE_FAILED*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*CALIBRATE_FAILED* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*CALIBRATE_FAILED* -13)
(intern "*NO_GOAL*" (find-package "FF_MSGS::ARMRESULT"))
(shadow '*NO_GOAL* (find-package "FF_MSGS::ARMRESULT"))
(defconstant ff_msgs::ArmResult::*NO_GOAL* -14)
(defclass ff_msgs::ArmResult
  :super ros::object
  :slots (_response _fsm_result ))

(defmethod ff_msgs::ArmResult
  (:init
   (&key
    ((:response __response) 0)
    ((:fsm_result __fsm_result) "")
    )
   (send-super :init)
   (setq _response (round __response))
   (setq _fsm_result (string __fsm_result))
   self)
  (:response
   (&optional __response)
   (if __response (setq _response __response)) _response)
  (:fsm_result
   (&optional __fsm_result)
   (if __fsm_result (setq _fsm_result __fsm_result)) _fsm_result)
  (:serialization-length
   ()
   (+
    ;; int32 _response
    4
    ;; string _fsm_result
    4 (length _fsm_result)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _response
       (write-long _response s)
     ;; string _fsm_result
       (write-long (length _fsm_result) s) (princ _fsm_result s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _response
     (setq _response (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; string _fsm_result
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _fsm_result (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get ff_msgs::ArmResult :md5sum-) "5c229b93f1064b9f1f7e8f3320eff359")
(setf (get ff_msgs::ArmResult :datatype-) "ff_msgs/ArmResult")
(setf (get ff_msgs::ArmResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Machine-readable reseult code
int32 response
int32 SUCCESS             =  1                # Successfully completed
int32 PREEMPTED           =  0                # Action was preempted
int32 INVALID_COMMAND     = -1                # Invalid command
int32 BAD_TILT_VALUE      = -2                # Invalid value for tilt
int32 BAD_PAN_VALUE       = -3                # Invalid value for pan
int32 BAD_GRIPPER_VALUE   = -4                # Invalid value for gripper
int32 NOT_ALLOWED         = -5                # Not allowed
int32 TILT_FAILED         = -6                # Tilt command failed
int32 PAN_FAILED          = -7                # Pan command failed
int32 GRIPPER_FAILED      = -8                # Gripper command failed
int32 COMMUNICATION_ERROR = -9                # Cannot communicate with arm
int32 COLLISION_AVOIDED   = -10               # No panning when tilt < 90
int32 ENABLE_FAILED       = -11               # Cannot enable the servos
int32 DISABLE_FAILED      = -12               # Cannot disable the servos
int32 CALIBRATE_FAILED    = -13               # Cannot calibrate the gripper
int32 NO_GOAL             = -14               # Unknown call to calibration

# Human readable FSM result for debugging
string fsm_result


")



(provide :ff_msgs/ArmResult "5c229b93f1064b9f1f7e8f3320eff359")


