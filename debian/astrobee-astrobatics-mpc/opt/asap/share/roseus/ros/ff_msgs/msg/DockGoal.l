;; Auto-generated. Do not edit!


(when (boundp 'ff_msgs::DockGoal)
  (if (not (find-package "FF_MSGS"))
    (make-package "FF_MSGS"))
  (shadow 'DockGoal (find-package "FF_MSGS")))
(unless (find-package "FF_MSGS::DOCKGOAL")
  (make-package "FF_MSGS::DOCKGOAL"))

(in-package "ROS")
;;//! \htmlinclude DockGoal.msg.html


(intern "*DOCK*" (find-package "FF_MSGS::DOCKGOAL"))
(shadow '*DOCK* (find-package "FF_MSGS::DOCKGOAL"))
(defconstant ff_msgs::DockGoal::*DOCK* 1)
(intern "*UNDOCK*" (find-package "FF_MSGS::DOCKGOAL"))
(shadow '*UNDOCK* (find-package "FF_MSGS::DOCKGOAL"))
(defconstant ff_msgs::DockGoal::*UNDOCK* 2)
(intern "*BERTH_UNKNOWN*" (find-package "FF_MSGS::DOCKGOAL"))
(shadow '*BERTH_UNKNOWN* (find-package "FF_MSGS::DOCKGOAL"))
(defconstant ff_msgs::DockGoal::*BERTH_UNKNOWN* 0)
(intern "*BERTH_1*" (find-package "FF_MSGS::DOCKGOAL"))
(shadow '*BERTH_1* (find-package "FF_MSGS::DOCKGOAL"))
(defconstant ff_msgs::DockGoal::*BERTH_1* 1)
(intern "*BERTH_2*" (find-package "FF_MSGS::DOCKGOAL"))
(shadow '*BERTH_2* (find-package "FF_MSGS::DOCKGOAL"))
(defconstant ff_msgs::DockGoal::*BERTH_2* 2)
(defclass ff_msgs::DockGoal
  :super ros::object
  :slots (_command _berth _return_dock ))

(defmethod ff_msgs::DockGoal
  (:init
   (&key
    ((:command __command) 0)
    ((:berth __berth) 0)
    ((:return_dock __return_dock) nil)
    )
   (send-super :init)
   (setq _command (round __command))
   (setq _berth (round __berth))
   (setq _return_dock __return_dock)
   self)
  (:command
   (&optional __command)
   (if __command (setq _command __command)) _command)
  (:berth
   (&optional __berth)
   (if __berth (setq _berth __berth)) _berth)
  (:return_dock
   (&optional __return_dock)
   (if __return_dock (setq _return_dock __return_dock)) _return_dock)
  (:serialization-length
   ()
   (+
    ;; uint8 _command
    1
    ;; uint8 _berth
    1
    ;; bool _return_dock
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _command
       (write-byte _command s)
     ;; uint8 _berth
       (write-byte _berth s)
     ;; bool _return_dock
       (if _return_dock (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _command
     (setq _command (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _berth
     (setq _berth (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; bool _return_dock
     (setq _return_dock (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get ff_msgs::DockGoal :md5sum-) "84df250ded700e76e456253a21c96ba5")
(setf (get ff_msgs::DockGoal :datatype-) "ff_msgs/DockGoal")
(setf (get ff_msgs::DockGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Dock action for the Docking node

# Do we want to dock or undock
uint8 command
uint8 DOCK    = 1
uint8 UNDOCK  = 2

# Which berth (values must match)
uint8 berth
uint8 BERTH_UNKNOWN = 0 # When we undock, we don't know what berth we are in
uint8 BERTH_1       = 1
uint8 BERTH_2       = 2

# Return to dock
bool return_dock


")



(provide :ff_msgs/DockGoal "84df250ded700e76e456253a21c96ba5")


