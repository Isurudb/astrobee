;; Auto-generated. Do not edit!


(when (boundp 'ff_msgs::ControlFeedback)
  (if (not (find-package "FF_MSGS"))
    (make-package "FF_MSGS"))
  (shadow 'ControlFeedback (find-package "FF_MSGS")))
(unless (find-package "FF_MSGS::CONTROLFEEDBACK")
  (make-package "FF_MSGS::CONTROLFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ControlFeedback.msg.html


(defclass ff_msgs::ControlFeedback
  :super ros::object
  :slots (_index _setpoint _error_position _error_attitude _error_velocity _error_omega ))

(defmethod ff_msgs::ControlFeedback
  (:init
   (&key
    ((:index __index) 0)
    ((:setpoint __setpoint) (instance ff_msgs::ControlState :init))
    ((:error_position __error_position) 0.0)
    ((:error_attitude __error_attitude) 0.0)
    ((:error_velocity __error_velocity) 0.0)
    ((:error_omega __error_omega) 0.0)
    )
   (send-super :init)
   (setq _index (round __index))
   (setq _setpoint __setpoint)
   (setq _error_position (float __error_position))
   (setq _error_attitude (float __error_attitude))
   (setq _error_velocity (float __error_velocity))
   (setq _error_omega (float __error_omega))
   self)
  (:index
   (&optional __index)
   (if __index (setq _index __index)) _index)
  (:setpoint
   (&rest __setpoint)
   (if (keywordp (car __setpoint))
       (send* _setpoint __setpoint)
     (progn
       (if __setpoint (setq _setpoint (car __setpoint)))
       _setpoint)))
  (:error_position
   (&optional __error_position)
   (if __error_position (setq _error_position __error_position)) _error_position)
  (:error_attitude
   (&optional __error_attitude)
   (if __error_attitude (setq _error_attitude __error_attitude)) _error_attitude)
  (:error_velocity
   (&optional __error_velocity)
   (if __error_velocity (setq _error_velocity __error_velocity)) _error_velocity)
  (:error_omega
   (&optional __error_omega)
   (if __error_omega (setq _error_omega __error_omega)) _error_omega)
  (:serialization-length
   ()
   (+
    ;; uint32 _index
    4
    ;; ff_msgs/ControlState _setpoint
    (send _setpoint :serialization-length)
    ;; float32 _error_position
    4
    ;; float32 _error_attitude
    4
    ;; float32 _error_velocity
    4
    ;; float32 _error_omega
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint32 _index
       (write-long _index s)
     ;; ff_msgs/ControlState _setpoint
       (send _setpoint :serialize s)
     ;; float32 _error_position
       (sys::poke _error_position (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _error_attitude
       (sys::poke _error_attitude (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _error_velocity
       (sys::poke _error_velocity (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _error_omega
       (sys::poke _error_omega (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint32 _index
     (setq _index (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; ff_msgs/ControlState _setpoint
     (send _setpoint :deserialize buf ptr-) (incf ptr- (send _setpoint :serialization-length))
   ;; float32 _error_position
     (setq _error_position (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _error_attitude
     (setq _error_attitude (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _error_velocity
     (setq _error_velocity (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _error_omega
     (setq _error_omega (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get ff_msgs::ControlFeedback :md5sum-) "1e2dd668bd0bc39b8d613faad6d7b071")
(setf (get ff_msgs::ControlFeedback :datatype-) "ff_msgs/ControlFeedback")
(setf (get ff_msgs::ControlFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

uint32 index                                # Index being processed

ff_msgs/ControlState setpoint               # Current setpoint

float32 error_position                      # Position error
float32 error_attitude                      # Attitude error
float32 error_velocity                      # Velocity error
float32 error_omega                         # Omega error


================================================================================
MSG: ff_msgs/ControlState
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Full state vector containing Time, Pose, Vel, and Accel
# 
# when {time}
# flight_mode {string} - disctates, gains, tolerances, etc.
# pose {Point position, Quaternion orientation}
# twist {Vector3 linear, Vector3 angular}
# accel {Vector3 linear, Vector3 angular}

time when
geometry_msgs/Pose pose
geometry_msgs/Twist twist
geometry_msgs/Twist accel

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :ff_msgs/ControlFeedback "1e2dd668bd0bc39b8d613faad6d7b071")


