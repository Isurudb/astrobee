;; Auto-generated. Do not edit!


(when (boundp 'ff_msgs::ControlGoal)
  (if (not (find-package "FF_MSGS"))
    (make-package "FF_MSGS"))
  (shadow 'ControlGoal (find-package "FF_MSGS")))
(unless (find-package "FF_MSGS::CONTROLGOAL")
  (make-package "FF_MSGS::CONTROLGOAL"))

(in-package "ROS")
;;//! \htmlinclude ControlGoal.msg.html


(intern "*STOP*" (find-package "FF_MSGS::CONTROLGOAL"))
(shadow '*STOP* (find-package "FF_MSGS::CONTROLGOAL"))
(defconstant ff_msgs::ControlGoal::*STOP* 0)
(intern "*IDLE*" (find-package "FF_MSGS::CONTROLGOAL"))
(shadow '*IDLE* (find-package "FF_MSGS::CONTROLGOAL"))
(defconstant ff_msgs::ControlGoal::*IDLE* 1)
(intern "*NOMINAL*" (find-package "FF_MSGS::CONTROLGOAL"))
(shadow '*NOMINAL* (find-package "FF_MSGS::CONTROLGOAL"))
(defconstant ff_msgs::ControlGoal::*NOMINAL* 2)
(defclass ff_msgs::ControlGoal
  :super ros::object
  :slots (_command _segment ))

(defmethod ff_msgs::ControlGoal
  (:init
   (&key
    ((:command __command) 0)
    ((:segment __segment) (let (r) (dotimes (i 0) (push (instance ff_msgs::ControlState :init) r)) r))
    )
   (send-super :init)
   (setq _command (round __command))
   (setq _segment __segment)
   self)
  (:command
   (&optional __command)
   (if __command (setq _command __command)) _command)
  (:segment
   (&rest __segment)
   (if (keywordp (car __segment))
       (send* _segment __segment)
     (progn
       (if __segment (setq _segment (car __segment)))
       _segment)))
  (:serialization-length
   ()
   (+
    ;; uint8 _command
    1
    ;; ff_msgs/ControlState[] _segment
    (apply #'+ (send-all _segment :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _command
       (write-byte _command s)
     ;; ff_msgs/ControlState[] _segment
     (write-long (length _segment) s)
     (dolist (elem _segment)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _command
     (setq _command (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; ff_msgs/ControlState[] _segment
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _segment (let (r) (dotimes (i n) (push (instance ff_msgs::ControlState :init) r)) r))
     (dolist (elem- _segment)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get ff_msgs::ControlGoal :md5sum-) "cb33d16997b599aafbc0b0932c171b92")
(setf (get ff_msgs::ControlGoal :datatype-) "ff_msgs/ControlGoal")
(setf (get ff_msgs::ControlGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# This message describes the CONTROL action offered by GNC::WRAPPER

uint8 command                               # STOP, IDLE, NOMINAL
uint8 STOP    = 0
uint8 IDLE    = 1
uint8 NOMINAL = 2

ff_msgs/ControlState[] segment              # NOMINIAL ONLY: Segment


================================================================================
MSG: ff_msgs/ControlState
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Full state vector containing Time, Pose, Vel, and Accel
# 
# when {time}
# flight_mode {string} - disctates, gains, tolerances, etc.
# pose {Point position, Quaternion orientation}
# twist {Vector3 linear, Vector3 angular}
# accel {Vector3 linear, Vector3 angular}

time when
geometry_msgs/Pose pose
geometry_msgs/Twist twist
geometry_msgs/Twist accel

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :ff_msgs/ControlGoal "cb33d16997b599aafbc0b0932c171b92")


