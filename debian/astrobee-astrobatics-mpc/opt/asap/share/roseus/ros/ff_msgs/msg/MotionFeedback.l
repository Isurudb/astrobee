;; Auto-generated. Do not edit!


(when (boundp 'ff_msgs::MotionFeedback)
  (if (not (find-package "FF_MSGS"))
    (make-package "FF_MSGS"))
  (shadow 'MotionFeedback (find-package "FF_MSGS")))
(unless (find-package "FF_MSGS::MOTIONFEEDBACK")
  (make-package "FF_MSGS::MOTIONFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude MotionFeedback.msg.html


(defclass ff_msgs::MotionFeedback
  :super ros::object
  :slots (_state _progress _perc_complete _secs_remaining ))

(defmethod ff_msgs::MotionFeedback
  (:init
   (&key
    ((:state __state) (instance ff_msgs::MotionState :init))
    ((:progress __progress) (instance ff_msgs::ControlFeedback :init))
    ((:perc_complete __perc_complete) 0.0)
    ((:secs_remaining __secs_remaining) 0.0)
    )
   (send-super :init)
   (setq _state __state)
   (setq _progress __progress)
   (setq _perc_complete (float __perc_complete))
   (setq _secs_remaining (float __secs_remaining))
   self)
  (:state
   (&rest __state)
   (if (keywordp (car __state))
       (send* _state __state)
     (progn
       (if __state (setq _state (car __state)))
       _state)))
  (:progress
   (&rest __progress)
   (if (keywordp (car __progress))
       (send* _progress __progress)
     (progn
       (if __progress (setq _progress (car __progress)))
       _progress)))
  (:perc_complete
   (&optional __perc_complete)
   (if __perc_complete (setq _perc_complete __perc_complete)) _perc_complete)
  (:secs_remaining
   (&optional __secs_remaining)
   (if __secs_remaining (setq _secs_remaining __secs_remaining)) _secs_remaining)
  (:serialization-length
   ()
   (+
    ;; ff_msgs/MotionState _state
    (send _state :serialization-length)
    ;; ff_msgs/ControlFeedback _progress
    (send _progress :serialization-length)
    ;; float32 _perc_complete
    4
    ;; float32 _secs_remaining
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; ff_msgs/MotionState _state
       (send _state :serialize s)
     ;; ff_msgs/ControlFeedback _progress
       (send _progress :serialize s)
     ;; float32 _perc_complete
       (sys::poke _perc_complete (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _secs_remaining
       (sys::poke _secs_remaining (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; ff_msgs/MotionState _state
     (send _state :deserialize buf ptr-) (incf ptr- (send _state :serialization-length))
   ;; ff_msgs/ControlFeedback _progress
     (send _progress :deserialize buf ptr-) (incf ptr- (send _progress :serialization-length))
   ;; float32 _perc_complete
     (setq _perc_complete (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _secs_remaining
     (setq _secs_remaining (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get ff_msgs::MotionFeedback :md5sum-) "a70f7ffb0db5b74cf7c14491a515651c")
(setf (get ff_msgs::MotionFeedback :datatype-) "ff_msgs/MotionFeedback")
(setf (get ff_msgs::MotionFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# The state of the teleop command
ff_msgs/MotionState state

# Control progress
ff_msgs/ControlFeedback progress

# Planner progress
float32 perc_complete
float32 secs_remaining


================================================================================
MSG: ff_msgs/MotionState
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Locked topic that registers updates to the internal dock state

# Header with timestamp
std_msgs/Header header

# The state of the mobility subsystem
int8 state
int8 INITIALIZING        = 0
int8 IDLE                = 1
int8 STOPPED             = 2
int8 IDLING              = 3
int8 STOPPING            = 4
int8 PREPPING            = 5
int8 BOOTSTRAPPING       = 6
int8 PLANNING            = 7
int8 PREPARING           = 8
int8 CONTROLLING         = 9
int8 REPLANNING          = 10
int8 HALTING             = 11
int8 REPLAN_WAIT         = 12

# A human readble version of the (event) -> [state] transition
string fsm_event
string fsm_state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ff_msgs/ControlFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

uint32 index                                # Index being processed

ff_msgs/ControlState setpoint               # Current setpoint

float32 error_position                      # Position error
float32 error_attitude                      # Attitude error
float32 error_velocity                      # Velocity error
float32 error_omega                         # Omega error


================================================================================
MSG: ff_msgs/ControlState
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the \"License\"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Full state vector containing Time, Pose, Vel, and Accel
# 
# when {time}
# flight_mode {string} - disctates, gains, tolerances, etc.
# pose {Point position, Quaternion orientation}
# twist {Vector3 linear, Vector3 angular}
# accel {Vector3 linear, Vector3 angular}

time when
geometry_msgs/Pose pose
geometry_msgs/Twist twist
geometry_msgs/Twist accel

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :ff_msgs/MotionFeedback "a70f7ffb0db5b74cf7c14491a515651c")


