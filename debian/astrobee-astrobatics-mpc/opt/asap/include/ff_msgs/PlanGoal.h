// Generated by gencpp from file ff_msgs/PlanGoal.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_PLANGOAL_H
#define FF_MSGS_MESSAGE_PLANGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct PlanGoal_
{
  typedef PlanGoal_<ContainerAllocator> Type;

  PlanGoal_()
    : states()
    , faceforward(false)
    , check_obstacles(false)
    , desired_vel(0.0)
    , desired_accel(0.0)
    , desired_omega(0.0)
    , desired_alpha(0.0)
    , desired_rate(0.0)
    , max_time()  {
    }
  PlanGoal_(const ContainerAllocator& _alloc)
    : states(_alloc)
    , faceforward(false)
    , check_obstacles(false)
    , desired_vel(0.0)
    , desired_accel(0.0)
    , desired_omega(0.0)
    , desired_alpha(0.0)
    , desired_rate(0.0)
    , max_time()  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _states_type;
  _states_type states;

   typedef uint8_t _faceforward_type;
  _faceforward_type faceforward;

   typedef uint8_t _check_obstacles_type;
  _check_obstacles_type check_obstacles;

   typedef float _desired_vel_type;
  _desired_vel_type desired_vel;

   typedef float _desired_accel_type;
  _desired_accel_type desired_accel;

   typedef float _desired_omega_type;
  _desired_omega_type desired_omega;

   typedef float _desired_alpha_type;
  _desired_alpha_type desired_alpha;

   typedef float _desired_rate_type;
  _desired_rate_type desired_rate;

   typedef ros::Duration _max_time_type;
  _max_time_type max_time;





  typedef boost::shared_ptr< ::ff_msgs::PlanGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::PlanGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PlanGoal_

typedef ::ff_msgs::PlanGoal_<std::allocator<void> > PlanGoal;

typedef boost::shared_ptr< ::ff_msgs::PlanGoal > PlanGoalPtr;
typedef boost::shared_ptr< ::ff_msgs::PlanGoal const> PlanGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::PlanGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::PlanGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::PlanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::PlanGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::PlanGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::PlanGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::PlanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::PlanGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::PlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a3c023dc4c031730a0eb5ee3812c31e";
  }

  static const char* value(const ::ff_msgs::PlanGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a3c023dc4c03173ULL;
  static const uint64_t static_value2 = 0x0a0eb5ee3812c31eULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::PlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/PlanGoal";
  }

  static const char* value(const ::ff_msgs::PlanGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::PlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# This message describes the PLAN action offered by the PLANNER\n\
\n\
geometry_msgs/PoseStamped[] states            # Desired state sequence\n\
\n\
bool faceforward                              # Face-forward trajectory?\n\
bool check_obstacles                          # Check against obstacles?\n\
\n\
float32 desired_vel                           # Desired (max) velocity\n\
float32 desired_accel                         # Desired (max) accel\n\
float32 desired_omega                         # Desired (max) omega\n\
float32 desired_alpha                         # Desired (max) alpha\n\
float32 desired_rate                          # Desired rate\n\
\n\
duration max_time                             # Max generation time\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ff_msgs::PlanGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::PlanGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
      stream.next(m.faceforward);
      stream.next(m.check_obstacles);
      stream.next(m.desired_vel);
      stream.next(m.desired_accel);
      stream.next(m.desired_omega);
      stream.next(m.desired_alpha);
      stream.next(m.desired_rate);
      stream.next(m.max_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::PlanGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::PlanGoal_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
    s << indent << "faceforward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.faceforward);
    s << indent << "check_obstacles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_obstacles);
    s << indent << "desired_vel: ";
    Printer<float>::stream(s, indent + "  ", v.desired_vel);
    s << indent << "desired_accel: ";
    Printer<float>::stream(s, indent + "  ", v.desired_accel);
    s << indent << "desired_omega: ";
    Printer<float>::stream(s, indent + "  ", v.desired_omega);
    s << indent << "desired_alpha: ";
    Printer<float>::stream(s, indent + "  ", v.desired_alpha);
    s << indent << "desired_rate: ";
    Printer<float>::stream(s, indent + "  ", v.desired_rate);
    s << indent << "max_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.max_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_PLANGOAL_H
