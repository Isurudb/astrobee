// Generated by gencpp from file ff_msgs/FaultState.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_FAULTSTATE_H
#define FF_MSGS_MESSAGE_FAULTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ff_msgs/Fault.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct FaultState_
{
  typedef FaultState_<ContainerAllocator> Type;

  FaultState_()
    : header()
    , state(0)
    , hr_state()
    , faults()  {
    }
  FaultState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , hr_state(_alloc)
    , faults(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hr_state_type;
  _hr_state_type hr_state;

   typedef std::vector< ::ff_msgs::Fault_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ff_msgs::Fault_<ContainerAllocator> >::other >  _faults_type;
  _faults_type faults;



  enum {
    STARTING_UP = 0u,
    FUNCTIONAL = 1u,
    FAULT = 2u,
    BLOCKED = 3u,
    RELOADING_NODELETS = 4u,
  };


  typedef boost::shared_ptr< ::ff_msgs::FaultState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::FaultState_<ContainerAllocator> const> ConstPtr;

}; // struct FaultState_

typedef ::ff_msgs::FaultState_<std::allocator<void> > FaultState;

typedef boost::shared_ptr< ::ff_msgs::FaultState > FaultStatePtr;
typedef boost::shared_ptr< ::ff_msgs::FaultState const> FaultStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::FaultState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::FaultState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FaultState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FaultState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FaultState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FaultState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FaultState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FaultState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::FaultState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ded9e5628846b2af7eff4a5b8d34c68";
  }

  static const char* value(const ::ff_msgs::FaultState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ded9e5628846b2aULL;
  static const uint64_t static_value2 = 0xf7eff4a5b8d34c68ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::FaultState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/FaultState";
  }

  static const char* value(const ::ff_msgs::FaultState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::FaultState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Fault state message used to alert the ground of the current faults. It is also\n\
# used to express to the executive that a fault has occurred that indirectly\n\
# affects the motion of the robot.\n\
\n\
std_msgs/Header header\n\
\n\
# Not sent to the ground, only used by the executive to determine what commands\n\
# to accept.\n\
uint8 state\n\
# System starting up\n\
uint8 STARTING_UP           = 0\n\
# No faults are occurring in system\n\
uint8 FUNCTIONAL            = 1\n\
# Faults are occurring in the system which may or may not leave the robot\n\
# functional\n\
uint8 FAULT                 = 2\n\
# A fault has occurred that indirectly affects the motion of the robot\n\
uint8 BLOCKED               = 3\n\
# Recovering from nodes dying on startup\n\
uint8 RELOADING_NODELETS    = 4\n\
\n\
# A human readable version of the state - only really used for when nodes die on\n\
# startup and need to be restarted.\n\
string hr_state\n\
\n\
# Faults occurring in the astrobee system, can only send 32 faults down\n\
ff_msgs/Fault[] faults\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ff_msgs/Fault\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Fault message is used to provide all the information about an occurring fault\n\
\n\
time time_of_fault        # Time when fault occurred\n\
\n\
uint32 id                 # id specifying fault\n\
\n\
string msg                # string specifying why the fault occurred\n\
\n\
ff_msgs/FaultData[] data  # Data used for fault analysis\n\
\n\
================================================================================\n\
MSG: ff_msgs/FaultData\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
# \n\
# Fault data messsage contains information of why the fault occurred\n\
\n\
uint8 DATA_TYPE_FLOAT   = 0   # Data in this msg is of type float\n\
uint8 DATA_TYPE_INT     = 1   # Data in this msg is of type int\n\
uint8 DATA_TYPE_STRING  = 2   # Data in this msg is of type string\n\
\n\
string key  # Specifies what the data in the msg is, can only be 32 chars long\n\
\n\
uint8 data_type   # Specifies the type of data in the message\n\
\n\
float32 f   # Value used for fault analysis, data_type must be 0\n\
int32 i     # Value used for fault analysis, data_type must be 1\n\
string s    # String used for fault analysis, data_type must be 2\n\
";
  }

  static const char* value(const ::ff_msgs::FaultState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::FaultState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.hr_state);
      stream.next(m.faults);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::FaultState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::FaultState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "hr_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hr_state);
    s << indent << "faults[]" << std::endl;
    for (size_t i = 0; i < v.faults.size(); ++i)
    {
      s << indent << "  faults[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ff_msgs::Fault_<ContainerAllocator> >::stream(s, indent + "    ", v.faults[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_FAULTSTATE_H
