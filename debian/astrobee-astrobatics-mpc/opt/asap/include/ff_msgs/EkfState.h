// Generated by gencpp from file ff_msgs/EkfState.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_EKFSTATE_H
#define FF_MSGS_MESSAGE_EKFSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Pose.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct EkfState_
{
  typedef EkfState_<ContainerAllocator> Type;

  EkfState_()
    : header()
    , child_frame_id()
    , pose()
    , velocity()
    , omega()
    , gyro_bias()
    , accel()
    , accel_bias()
    , cov_diag()
    , confidence(0)
    , aug_state_enum(0)
    , status(0)
    , of_count(0)
    , ml_count(0)
    , hr_global_pose()
    , ml_mahal_dists()
    , estimating_bias(false)  {
      cov_diag.assign(0.0);

      ml_mahal_dists.assign(0.0);
  }
  EkfState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , pose(_alloc)
    , velocity(_alloc)
    , omega(_alloc)
    , gyro_bias(_alloc)
    , accel(_alloc)
    , accel_bias(_alloc)
    , cov_diag()
    , confidence(0)
    , aug_state_enum(0)
    , status(0)
    , of_count(0)
    , ml_count(0)
    , hr_global_pose(_alloc)
    , ml_mahal_dists()
    , estimating_bias(false)  {
  (void)_alloc;
      cov_diag.assign(0.0);

      ml_mahal_dists.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _omega_type;
  _omega_type omega;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyro_bias_type;
  _gyro_bias_type gyro_bias;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_bias_type;
  _accel_bias_type accel_bias;

   typedef boost::array<float, 15>  _cov_diag_type;
  _cov_diag_type cov_diag;

   typedef uint8_t _confidence_type;
  _confidence_type confidence;

   typedef uint8_t _aug_state_enum_type;
  _aug_state_enum_type aug_state_enum;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _of_count_type;
  _of_count_type of_count;

   typedef uint8_t _ml_count_type;
  _ml_count_type ml_count;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _hr_global_pose_type;
  _hr_global_pose_type hr_global_pose;

   typedef boost::array<float, 50>  _ml_mahal_dists_type;
  _ml_mahal_dists_type ml_mahal_dists;

   typedef uint8_t _estimating_bias_type;
  _estimating_bias_type estimating_bias;



  enum {
    CONFIDENCE_GOOD = 0u,
    CONFIDENCE_POOR = 1u,
    CONFIDENCE_LOST = 2u,
    STATUS_INVALID = 255u,
  };


  typedef boost::shared_ptr< ::ff_msgs::EkfState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::EkfState_<ContainerAllocator> const> ConstPtr;

}; // struct EkfState_

typedef ::ff_msgs::EkfState_<std::allocator<void> > EkfState;

typedef boost::shared_ptr< ::ff_msgs::EkfState > EkfStatePtr;
typedef boost::shared_ptr< ::ff_msgs::EkfState const> EkfStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::EkfState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::EkfState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::EkfState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::EkfState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::EkfState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::EkfState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::EkfState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::EkfState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::EkfState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "543b97822b033d7199b506ad4005f134";
  }

  static const char* value(const ::ff_msgs::EkfState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x543b97822b033d71ULL;
  static const uint64_t static_value2 = 0x99b506ad4005f134ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::EkfState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/EkfState";
  }

  static const char* value(const ::ff_msgs::EkfState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::EkfState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# An observation of a handrail from a depth image.\n\
\n\
std_msgs/Header header # header with timestamp\n\
string child_frame_id # frame ID\n\
\n\
geometry_msgs/Pose pose # robot body pose\n\
\n\
# m/s\n\
geometry_msgs/Vector3 velocity # the body velocity\n\
\n\
# rad/s\n\
geometry_msgs/Vector3 omega # body rotational velocity\n\
geometry_msgs/Vector3 gyro_bias # estimated gyro bias\n\
\n\
# m/s/s\n\
geometry_msgs/Vector3 accel # acceleration in body frame\n\
geometry_msgs/Vector3 accel_bias # estimated accel bias\n\
\n\
# Filter Health\n\
\n\
# covariance diagonal. 1-3 orientation, 4-6 gyro bias, 7-9 velocity, 10-12 accel bias, 13-15 position\n\
float32[15] cov_diag\n\
# confidence in EKF. 0 is good, 1 is a bit confused, 2 is lost\n\
uint8 confidence\n\
uint8 CONFIDENCE_GOOD = 0	# Tracking well\n\
uint8 CONFIDENCE_POOR = 1	# Tracking poorly\n\
uint8 CONFIDENCE_LOST = 2	# We are lost\n\
\n\
uint8 aug_state_enum # bitmask of augmented states intialized\n\
\n\
# status byte sent by GNC\n\
uint8 status\n\
uint8 STATUS_INVALID = 255	# invalid\n\
\n\
# optical flow features this frame (0 if no update)\n\
uint8 of_count\n\
# ml features this frame (0 if no update)\n\
uint8 ml_count\n\
\n\
# Global Handrail Pose\n\
geometry_msgs/Pose hr_global_pose\n\
\n\
# mahalanobis distances for features\n\
float32[50] ml_mahal_dists\n\
\n\
# Are we busy estimating the bias?\n\
bool estimating_bias\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ff_msgs::EkfState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::EkfState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.omega);
      stream.next(m.gyro_bias);
      stream.next(m.accel);
      stream.next(m.accel_bias);
      stream.next(m.cov_diag);
      stream.next(m.confidence);
      stream.next(m.aug_state_enum);
      stream.next(m.status);
      stream.next(m.of_count);
      stream.next(m.ml_count);
      stream.next(m.hr_global_pose);
      stream.next(m.ml_mahal_dists);
      stream.next(m.estimating_bias);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EkfState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::EkfState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::EkfState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "omega: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.omega);
    s << indent << "gyro_bias: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro_bias);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "accel_bias: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel_bias);
    s << indent << "cov_diag[]" << std::endl;
    for (size_t i = 0; i < v.cov_diag.size(); ++i)
    {
      s << indent << "  cov_diag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cov_diag[i]);
    }
    s << indent << "confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence);
    s << indent << "aug_state_enum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aug_state_enum);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "of_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.of_count);
    s << indent << "ml_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ml_count);
    s << indent << "hr_global_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.hr_global_pose);
    s << indent << "ml_mahal_dists[]" << std::endl;
    for (size_t i = 0; i < v.ml_mahal_dists.size(); ++i)
    {
      s << indent << "  ml_mahal_dists[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ml_mahal_dists[i]);
    }
    s << indent << "estimating_bias: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estimating_bias);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_EKFSTATE_H
