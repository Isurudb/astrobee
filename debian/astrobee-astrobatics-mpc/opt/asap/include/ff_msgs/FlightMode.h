// Generated by gencpp from file ff_msgs/FlightMode.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_FLIGHTMODE_H
#define FF_MSGS_MESSAGE_FLIGHTMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct FlightMode_
{
  typedef FlightMode_<ContainerAllocator> Type;

  FlightMode_()
    : header()
    , name()
    , control_enabled(false)
    , tolerance_pos_endpoint(0.0)
    , tolerance_pos(0.0)
    , tolerance_vel(0.0)
    , tolerance_att(0.0)
    , tolerance_omega(0.0)
    , tolerance_time(0.0)
    , att_kp()
    , att_ki()
    , omega_kd()
    , pos_kp()
    , pos_ki()
    , vel_kd()
    , hard_limit_vel(0.0)
    , hard_limit_accel(0.0)
    , hard_limit_omega(0.0)
    , hard_limit_alpha(0.0)
    , speed(0)  {
    }
  FlightMode_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , control_enabled(false)
    , tolerance_pos_endpoint(0.0)
    , tolerance_pos(0.0)
    , tolerance_vel(0.0)
    , tolerance_att(0.0)
    , tolerance_omega(0.0)
    , tolerance_time(0.0)
    , att_kp(_alloc)
    , att_ki(_alloc)
    , omega_kd(_alloc)
    , pos_kp(_alloc)
    , pos_ki(_alloc)
    , vel_kd(_alloc)
    , hard_limit_vel(0.0)
    , hard_limit_accel(0.0)
    , hard_limit_omega(0.0)
    , hard_limit_alpha(0.0)
    , speed(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _control_enabled_type;
  _control_enabled_type control_enabled;

   typedef float _tolerance_pos_endpoint_type;
  _tolerance_pos_endpoint_type tolerance_pos_endpoint;

   typedef float _tolerance_pos_type;
  _tolerance_pos_type tolerance_pos;

   typedef float _tolerance_vel_type;
  _tolerance_vel_type tolerance_vel;

   typedef float _tolerance_att_type;
  _tolerance_att_type tolerance_att;

   typedef float _tolerance_omega_type;
  _tolerance_omega_type tolerance_omega;

   typedef float _tolerance_time_type;
  _tolerance_time_type tolerance_time;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _att_kp_type;
  _att_kp_type att_kp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _att_ki_type;
  _att_ki_type att_ki;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _omega_kd_type;
  _omega_kd_type omega_kd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_kp_type;
  _pos_kp_type pos_kp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_ki_type;
  _pos_ki_type pos_ki;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_kd_type;
  _vel_kd_type vel_kd;

   typedef float _hard_limit_vel_type;
  _hard_limit_vel_type hard_limit_vel;

   typedef float _hard_limit_accel_type;
  _hard_limit_accel_type hard_limit_accel;

   typedef float _hard_limit_omega_type;
  _hard_limit_omega_type hard_limit_omega;

   typedef float _hard_limit_alpha_type;
  _hard_limit_alpha_type hard_limit_alpha;

   typedef uint8_t _speed_type;
  _speed_type speed;



  enum {
    SPEED_MIN = 0u,
    SPEED_OFF = 0u,
    SPEED_QUIET = 1u,
    SPEED_NOMINAL = 2u,
    SPEED_AGGRESSIVE = 3u,
    SPEED_MAX = 3u,
  };


  typedef boost::shared_ptr< ::ff_msgs::FlightMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::FlightMode_<ContainerAllocator> const> ConstPtr;

}; // struct FlightMode_

typedef ::ff_msgs::FlightMode_<std::allocator<void> > FlightMode;

typedef boost::shared_ptr< ::ff_msgs::FlightMode > FlightModePtr;
typedef boost::shared_ptr< ::ff_msgs::FlightMode const> FlightModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::FlightMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::FlightMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FlightMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FlightMode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FlightMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FlightMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FlightMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FlightMode_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::FlightMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0bb389101a5f30087bd644e6596d8e8e";
  }

  static const char* value(const ::ff_msgs::FlightMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0bb389101a5f3008ULL;
  static const uint64_t static_value2 = 0x7bd644e6596d8e8eULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::FlightMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/FlightMode";
  }

  static const char* value(const ::ff_msgs::FlightMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::FlightMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# This message captures all information in a flight mode\n\
\n\
Header header                     # Metadata\n\
\n\
string name                       # Name of the flight mode\n\
\n\
bool control_enabled              # Is control enabled?\n\
\n\
# Tolerances (all in SI units)\n\
float32 tolerance_pos_endpoint    # Endpoint position tolerance in m\n\
float32 tolerance_pos             # Position tolerance in m\n\
float32 tolerance_vel             # Velocity tolerance in m/s\n\
float32 tolerance_att             # Attitude tolerance in rads\n\
float32 tolerance_omega           # Angular acceleration tolerance in rad/s\n\
float32 tolerance_time            # Acceptable lag betwee TX and RX of control\n\
\n\
# Controller gains\n\
geometry_msgs/Vector3 att_kp      # Positional proportional constant\n\
geometry_msgs/Vector3 att_ki      # Positional integrative constant\n\
geometry_msgs/Vector3 omega_kd    # Attidue derivative constant\n\
geometry_msgs/Vector3 pos_kp      # Positional proportional contant\n\
geometry_msgs/Vector3 pos_ki      # Positional integrative constant\n\
geometry_msgs/Vector3 vel_kd      # Positional derivative constant\n\
\n\
# Hard limit on planning\n\
float32 hard_limit_vel            # Position tolerance in m/s\n\
float32 hard_limit_accel          # Position tolerance in m/s^2\n\
float32 hard_limit_omega          # Position tolerance in rads/s\n\
float32 hard_limit_alpha          # Position tolerance in rads/s^2\n\
\n\
# Impeller speed\n\
uint8 speed                       # Current speed gain\n\
uint8 SPEED_MIN        = 0        # Min acceptable gain\n\
uint8 SPEED_OFF        = 0        # Blowers off\n\
uint8 SPEED_QUIET      = 1        # Quiet mode\n\
uint8 SPEED_NOMINAL    = 2        # Nomainal mode\n\
uint8 SPEED_AGGRESSIVE = 3        # Aggressive mode\n\
uint8 SPEED_MAX        = 3        # Max acceptable gain\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ff_msgs::FlightMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::FlightMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.control_enabled);
      stream.next(m.tolerance_pos_endpoint);
      stream.next(m.tolerance_pos);
      stream.next(m.tolerance_vel);
      stream.next(m.tolerance_att);
      stream.next(m.tolerance_omega);
      stream.next(m.tolerance_time);
      stream.next(m.att_kp);
      stream.next(m.att_ki);
      stream.next(m.omega_kd);
      stream.next(m.pos_kp);
      stream.next(m.pos_ki);
      stream.next(m.vel_kd);
      stream.next(m.hard_limit_vel);
      stream.next(m.hard_limit_accel);
      stream.next(m.hard_limit_omega);
      stream.next(m.hard_limit_alpha);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::FlightMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::FlightMode_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "control_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_enabled);
    s << indent << "tolerance_pos_endpoint: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_pos_endpoint);
    s << indent << "tolerance_pos: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_pos);
    s << indent << "tolerance_vel: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_vel);
    s << indent << "tolerance_att: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_att);
    s << indent << "tolerance_omega: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_omega);
    s << indent << "tolerance_time: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_time);
    s << indent << "att_kp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.att_kp);
    s << indent << "att_ki: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.att_ki);
    s << indent << "omega_kd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.omega_kd);
    s << indent << "pos_kp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_kp);
    s << indent << "pos_ki: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_ki);
    s << indent << "vel_kd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_kd);
    s << indent << "hard_limit_vel: ";
    Printer<float>::stream(s, indent + "  ", v.hard_limit_vel);
    s << indent << "hard_limit_accel: ";
    Printer<float>::stream(s, indent + "  ", v.hard_limit_accel);
    s << indent << "hard_limit_omega: ";
    Printer<float>::stream(s, indent + "  ", v.hard_limit_omega);
    s << indent << "hard_limit_alpha: ";
    Printer<float>::stream(s, indent + "  ", v.hard_limit_alpha);
    s << indent << "speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_FLIGHTMODE_H
