// Generated by gencpp from file ff_msgs/ControlGoal.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_CONTROLGOAL_H
#define FF_MSGS_MESSAGE_CONTROLGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ff_msgs/ControlState.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct ControlGoal_
{
  typedef ControlGoal_<ContainerAllocator> Type;

  ControlGoal_()
    : command(0)
    , segment()  {
    }
  ControlGoal_(const ContainerAllocator& _alloc)
    : command(0)
    , segment(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef std::vector< ::ff_msgs::ControlState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ff_msgs::ControlState_<ContainerAllocator> >::other >  _segment_type;
  _segment_type segment;



  enum {
    STOP = 0u,
    IDLE = 1u,
    NOMINAL = 2u,
  };


  typedef boost::shared_ptr< ::ff_msgs::ControlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::ControlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ControlGoal_

typedef ::ff_msgs::ControlGoal_<std::allocator<void> > ControlGoal;

typedef boost::shared_ptr< ::ff_msgs::ControlGoal > ControlGoalPtr;
typedef boost::shared_ptr< ::ff_msgs::ControlGoal const> ControlGoalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::ControlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::ControlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::ControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::ControlGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::ControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::ControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::ControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::ControlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::ControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb33d16997b599aafbc0b0932c171b92";
  }

  static const char* value(const ::ff_msgs::ControlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb33d16997b599aaULL;
  static const uint64_t static_value2 = 0xfbc0b0932c171b92ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::ControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/ControlGoal";
  }

  static const char* value(const ::ff_msgs::ControlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::ControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# This message describes the CONTROL action offered by GNC::WRAPPER\n\
\n\
uint8 command                               # STOP, IDLE, NOMINAL\n\
uint8 STOP    = 0\n\
uint8 IDLE    = 1\n\
uint8 NOMINAL = 2\n\
\n\
ff_msgs/ControlState[] segment              # NOMINIAL ONLY: Segment\n\
\n\
\n\
================================================================================\n\
MSG: ff_msgs/ControlState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Full state vector containing Time, Pose, Vel, and Accel\n\
# \n\
# when {time}\n\
# flight_mode {string} - disctates, gains, tolerances, etc.\n\
# pose {Point position, Quaternion orientation}\n\
# twist {Vector3 linear, Vector3 angular}\n\
# accel {Vector3 linear, Vector3 angular}\n\
\n\
time when\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist twist\n\
geometry_msgs/Twist accel\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ff_msgs::ControlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::ControlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.segment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::ControlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::ControlGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "segment[]" << std::endl;
    for (size_t i = 0; i < v.segment.size(); ++i)
    {
      s << indent << "  segment[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ff_msgs::ControlState_<ContainerAllocator> >::stream(s, indent + "    ", v.segment[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_CONTROLGOAL_H
