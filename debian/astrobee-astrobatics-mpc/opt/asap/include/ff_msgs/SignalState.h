// Generated by gencpp from file ff_msgs/SignalState.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_SIGNALSTATE_H
#define FF_MSGS_MESSAGE_SIGNALSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct SignalState_
{
  typedef SignalState_<ContainerAllocator> Type;

  SignalState_()
    : header()
    , state(0)  {
    }
  SignalState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_type;
  _state_type state;



  enum {
    VIDEO_ON = 0u,
    VIDEO_OFF = 1u,
    SUCCESS = 3u,
    ENTER_HATCHWAY = 4u,
    UNDOCK = 5u,
    UNPERCH = 6u,
    MOTION_IMPAIRED = 7u,
    THRUST_FORWARD = 8u,
    THRUST_AFT = 9u,
    TURN_RIGHT = 10u,
    TURN_LEFT = 11u,
    TURN_UP = 12u,
    TURN_DOWN = 13u,
    CLEAR = 14u,
    SLEEP = 15u,
    WAKE = 16u,
    STOP_ALL_LIGHTS = 17u,
    CHARGING = 18u,
  };


  typedef boost::shared_ptr< ::ff_msgs::SignalState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::SignalState_<ContainerAllocator> const> ConstPtr;

}; // struct SignalState_

typedef ::ff_msgs::SignalState_<std::allocator<void> > SignalState;

typedef boost::shared_ptr< ::ff_msgs::SignalState > SignalStatePtr;
typedef boost::shared_ptr< ::ff_msgs::SignalState const> SignalStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::SignalState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::SignalState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::SignalState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::SignalState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::SignalState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::SignalState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::SignalState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::SignalState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::SignalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d27ab072e4b4bf58f04e75ff6768d4e";
  }

  static const char* value(const ::ff_msgs::SignalState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d27ab072e4b4bf5ULL;
  static const uint64_t static_value2 = 0x8f04e75ff6768d4eULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::SignalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/SignalState";
  }

  static const char* value(const ::ff_msgs::SignalState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::SignalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Signal state which is based on what the Astrobee is doing. Should be used to\n\
# figure out what should be displayed on the signal lights and touch screen.\n\
\n\
# Header with timestamp\n\
std_msgs/Header header\n\
\n\
uint8 VIDEO_ON              = 0\n\
uint8 VIDEO_OFF             = 1\n\
uint8 SUCCESS               = 3\n\
uint8 ENTER_HATCHWAY        = 4\n\
uint8 UNDOCK                = 5\n\
uint8 UNPERCH               = 6\n\
uint8 MOTION_IMPAIRED       = 7\n\
uint8 THRUST_FORWARD        = 8\n\
uint8 THRUST_AFT            = 9\n\
uint8 TURN_RIGHT            = 10\n\
uint8 TURN_LEFT             = 11\n\
uint8 TURN_UP               = 12\n\
uint8 TURN_DOWN             = 13\n\
uint8 CLEAR                 = 14\n\
uint8 SLEEP                 = 15\n\
uint8 WAKE                  = 16\n\
uint8 STOP_ALL_LIGHTS       = 17\n\
uint8 CHARGING              = 18\n\
\n\
# Signal state\n\
uint8 state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ff_msgs::SignalState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::SignalState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::SignalState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::SignalState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_SIGNALSTATE_H
