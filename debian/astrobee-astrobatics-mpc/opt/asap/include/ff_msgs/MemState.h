// Generated by gencpp from file ff_msgs/MemState.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_MEMSTATE_H
#define FF_MSGS_MESSAGE_MEMSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct MemState_
{
  typedef MemState_<ContainerAllocator> Type;

  MemState_()
    : name()
    , virt(0)
    , virt_peak(0)
    , ram(0)
    , ram_peak(0)
    , ram_perc(0.0)  {
    }
  MemState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , virt(0)
    , virt_peak(0)
    , ram(0)
    , ram_peak(0)
    , ram_perc(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _virt_type;
  _virt_type virt;

   typedef uint32_t _virt_peak_type;
  _virt_peak_type virt_peak;

   typedef uint32_t _ram_type;
  _ram_type ram;

   typedef uint32_t _ram_peak_type;
  _ram_peak_type ram_peak;

   typedef float _ram_perc_type;
  _ram_perc_type ram_perc;





  typedef boost::shared_ptr< ::ff_msgs::MemState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::MemState_<ContainerAllocator> const> ConstPtr;

}; // struct MemState_

typedef ::ff_msgs::MemState_<std::allocator<void> > MemState;

typedef boost::shared_ptr< ::ff_msgs::MemState > MemStatePtr;
typedef boost::shared_ptr< ::ff_msgs::MemState const> MemStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::MemState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::MemState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::MemState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::MemState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::MemState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::MemState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::MemState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::MemState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::MemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35fa33fe0824ebd7cf296b7a82e3c26b";
  }

  static const char* value(const ::ff_msgs::MemState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35fa33fe0824ebd7ULL;
  static const uint64_t static_value2 = 0xcf296b7a82e3c26bULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::MemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/MemState";
  }

  static const char* value(const ::ff_msgs::MemState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::MemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# State of the Memory.\n\
\n\
# The memory load of the node, for the fields given in\n\
string name\n\
# Virtual Memory\n\
uint32 virt        # virtual memeory used in Mb\n\
uint32 virt_peak   # peak virtual memory used in Mb\n\
\n\
# Physical Memory\n\
uint32 ram        # physical memory used in Mb\n\
uint32 ram_peak   # peak physical memory used in Mb\n\
float32 ram_perc  # percentage of physical memory in %\n\
\n\
";
  }

  static const char* value(const ::ff_msgs::MemState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::MemState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.virt);
      stream.next(m.virt_peak);
      stream.next(m.ram);
      stream.next(m.ram_peak);
      stream.next(m.ram_perc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MemState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::MemState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::MemState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "virt: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.virt);
    s << indent << "virt_peak: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.virt_peak);
    s << indent << "ram: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ram);
    s << indent << "ram_peak: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ram_peak);
    s << indent << "ram_perc: ";
    Printer<float>::stream(s, indent + "  ", v.ram_perc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_MEMSTATE_H
