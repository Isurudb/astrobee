// Generated by gencpp from file ff_msgs/DepthLandmarks.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_DEPTHLANDMARKS_H
#define FF_MSGS_MESSAGE_DEPTHLANDMARKS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point32.h>
#include <ff_msgs/DepthLandmark.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct DepthLandmarks_
{
  typedef DepthLandmarks_<ContainerAllocator> Type;

  DepthLandmarks_()
    : header()
    , camera_id(0)
    , end_seen(0)
    , update_global_pose(0)
    , sensor_T_handrail()
    , sensor_t_line_points()
    , sensor_t_line_endpoints()
    , sensor_t_plane_points()
    , landmarks()  {
    }
  DepthLandmarks_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , camera_id(0)
    , end_seen(0)
    , update_global_pose(0)
    , sensor_T_handrail(_alloc)
    , sensor_t_line_points(_alloc)
    , sensor_t_line_endpoints(_alloc)
    , sensor_t_plane_points(_alloc)
    , landmarks(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _camera_id_type;
  _camera_id_type camera_id;

   typedef uint8_t _end_seen_type;
  _end_seen_type end_seen;

   typedef uint8_t _update_global_pose_type;
  _update_global_pose_type update_global_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _sensor_T_handrail_type;
  _sensor_T_handrail_type sensor_T_handrail;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _sensor_t_line_points_type;
  _sensor_t_line_points_type sensor_t_line_points;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _sensor_t_line_endpoints_type;
  _sensor_t_line_endpoints_type sensor_t_line_endpoints;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _sensor_t_plane_points_type;
  _sensor_t_plane_points_type sensor_t_plane_points;

   typedef std::vector< ::ff_msgs::DepthLandmark_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ff_msgs::DepthLandmark_<ContainerAllocator> >::other >  _landmarks_type;
  _landmarks_type landmarks;





  typedef boost::shared_ptr< ::ff_msgs::DepthLandmarks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::DepthLandmarks_<ContainerAllocator> const> ConstPtr;

}; // struct DepthLandmarks_

typedef ::ff_msgs::DepthLandmarks_<std::allocator<void> > DepthLandmarks;

typedef boost::shared_ptr< ::ff_msgs::DepthLandmarks > DepthLandmarksPtr;
typedef boost::shared_ptr< ::ff_msgs::DepthLandmarks const> DepthLandmarksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::DepthLandmarks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::DepthLandmarks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::DepthLandmarks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::DepthLandmarks_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fc86a54f996c15d2798a19b023404dc";
  }

  static const char* value(const ::ff_msgs::DepthLandmarks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fc86a54f996c15dULL;
  static const uint64_t static_value2 = 0x2798a19b023404dcULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/DepthLandmarks";
  }

  static const char* value(const ::ff_msgs::DepthLandmarks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# An observation of a handrail from a depth image.\n\
\n\
Header header                                  # Image header, with time stamp\n\
uint32 camera_id                               # Image ID, associated with registration\n\
uint8 end_seen                                 # Whether the handrail endpoint was detected\n\
uint8 update_global_pose                       # Whether to update the global pose\n\
geometry_msgs/Pose sensor_T_handrail           # Handrail center in the sensor frame\n\
geometry_msgs/Point32[] sensor_t_line_points   # Detected line points\n\
geometry_msgs/Point[] sensor_t_line_endpoints  # Detected line endpoints\n\
geometry_msgs/Point32[] sensor_t_plane_points  # Detected plane points\n\
ff_msgs/DepthLandmark[] landmarks              # List of landmarks seen TODO(rsoussan): This should be removed\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: ff_msgs/DepthLandmark\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# A landmark seen from a depth landmark\n\
\n\
float32 u     # First coordinate in the image plane\n\
float32 v     # Second coordinate in the image plane\n\
float32 w     # Depth\n\
";
  }

  static const char* value(const ::ff_msgs::DepthLandmarks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.camera_id);
      stream.next(m.end_seen);
      stream.next(m.update_global_pose);
      stream.next(m.sensor_T_handrail);
      stream.next(m.sensor_t_line_points);
      stream.next(m.sensor_t_line_endpoints);
      stream.next(m.sensor_t_plane_points);
      stream.next(m.landmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DepthLandmarks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::DepthLandmarks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::DepthLandmarks_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "camera_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.camera_id);
    s << indent << "end_seen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.end_seen);
    s << indent << "update_global_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.update_global_pose);
    s << indent << "sensor_T_handrail: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_T_handrail);
    s << indent << "sensor_t_line_points[]" << std::endl;
    for (size_t i = 0; i < v.sensor_t_line_points.size(); ++i)
    {
      s << indent << "  sensor_t_line_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor_t_line_points[i]);
    }
    s << indent << "sensor_t_line_endpoints[]" << std::endl;
    for (size_t i = 0; i < v.sensor_t_line_endpoints.size(); ++i)
    {
      s << indent << "  sensor_t_line_endpoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor_t_line_endpoints[i]);
    }
    s << indent << "sensor_t_plane_points[]" << std::endl;
    for (size_t i = 0; i < v.sensor_t_plane_points.size(); ++i)
    {
      s << indent << "  sensor_t_plane_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor_t_plane_points[i]);
    }
    s << indent << "landmarks[]" << std::endl;
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      s << indent << "  landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ff_msgs::DepthLandmark_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_DEPTHLANDMARKS_H
