// Generated by gencpp from file ff_msgs/FamCommand.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_FAMCOMMAND_H
#define FF_MSGS_MESSAGE_FAMCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct FamCommand_
{
  typedef FamCommand_<ContainerAllocator> Type;

  FamCommand_()
    : header()
    , wrench()
    , accel()
    , alpha()
    , status(0)
    , position_error()
    , position_error_integrated()
    , attitude_error()
    , attitude_error_integrated()
    , attitude_error_mag(0.0)
    , control_mode(0)  {
    }
  FamCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , wrench(_alloc)
    , accel(_alloc)
    , alpha(_alloc)
    , status(0)
    , position_error(_alloc)
    , position_error_integrated(_alloc)
    , attitude_error(_alloc)
    , attitude_error_integrated(_alloc)
    , attitude_error_mag(0.0)
    , control_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _alpha_type;
  _alpha_type alpha;

   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_error_type;
  _position_error_type position_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_error_integrated_type;
  _position_error_integrated_type position_error_integrated;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_error_type;
  _attitude_error_type attitude_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_error_integrated_type;
  _attitude_error_integrated_type attitude_error_integrated;

   typedef float _attitude_error_mag_type;
  _attitude_error_mag_type attitude_error_mag;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;





  typedef boost::shared_ptr< ::ff_msgs::FamCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::FamCommand_<ContainerAllocator> const> ConstPtr;

}; // struct FamCommand_

typedef ::ff_msgs::FamCommand_<std::allocator<void> > FamCommand;

typedef boost::shared_ptr< ::ff_msgs::FamCommand > FamCommandPtr;
typedef boost::shared_ptr< ::ff_msgs::FamCommand const> FamCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::FamCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::FamCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FamCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FamCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FamCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FamCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FamCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FamCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::FamCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baf174131dee1a8b03d9d5feac8aa809";
  }

  static const char* value(const ::ff_msgs::FamCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbaf174131dee1a8bULL;
  static const uint64_t static_value2 = 0x03d9d5feac8aa809ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::FamCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/FamCommand";
  }

  static const char* value(const ::ff_msgs::FamCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::FamCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Command sent from control to the FAM.\n\
\n\
std_msgs/Header header # header with time stamp\n\
\n\
# force and torque\n\
geometry_msgs/Wrench wrench\n\
# linear acceleration (wrench w/out estimated mass)\n\
geometry_msgs/Vector3 accel\n\
# angular accceleration (wrench w/out estimated mass)\n\
geometry_msgs/Vector3 alpha\n\
\n\
# status byte from GNC ICD\n\
uint8 status\n\
\n\
# position error\n\
geometry_msgs/Vector3 position_error\n\
# integrated position error\n\
geometry_msgs/Vector3 position_error_integrated\n\
\n\
# attitude error\n\
geometry_msgs/Vector3 attitude_error\n\
# integrated attitude error\n\
geometry_msgs/Vector3 attitude_error_integrated\n\
# magnitude of attitude error\n\
float32 attitude_error_mag\n\
\n\
# control mode from GNC ICD\n\
uint8 control_mode\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ff_msgs::FamCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::FamCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.wrench);
      stream.next(m.accel);
      stream.next(m.alpha);
      stream.next(m.status);
      stream.next(m.position_error);
      stream.next(m.position_error_integrated);
      stream.next(m.attitude_error);
      stream.next(m.attitude_error_integrated);
      stream.next(m.attitude_error_mag);
      stream.next(m.control_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FamCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::FamCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::FamCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "alpha: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.alpha);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "position_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_error);
    s << indent << "position_error_integrated: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_error_integrated);
    s << indent << "attitude_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_error);
    s << indent << "attitude_error_integrated: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_error_integrated);
    s << indent << "attitude_error_mag: ";
    Printer<float>::stream(s, indent + "  ", v.attitude_error_mag);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_FAMCOMMAND_H
