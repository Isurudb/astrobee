// Generated by gencpp from file ff_msgs/ArmGoal.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_ARMGOAL_H
#define FF_MSGS_MESSAGE_ARMGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct ArmGoal_
{
  typedef ArmGoal_<ContainerAllocator> Type;

  ArmGoal_()
    : command(0)
    , pan(0.0)
    , tilt(0.0)
    , gripper(0.0)  {
    }
  ArmGoal_(const ContainerAllocator& _alloc)
    : command(0)
    , pan(0.0)
    , tilt(0.0)
    , gripper(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef float _pan_type;
  _pan_type pan;

   typedef float _tilt_type;
  _tilt_type tilt;

   typedef float _gripper_type;
  _gripper_type gripper;



  enum {
    ARM_STOP = 0u,
    ARM_DEPLOY = 1u,
    ARM_STOW = 2u,
    ARM_PAN = 3u,
    ARM_TILT = 4u,
    ARM_MOVE = 5u,
    GRIPPER_SET = 6u,
    GRIPPER_OPEN = 7u,
    GRIPPER_CLOSE = 8u,
    DISABLE_SERVO = 9u,
  };


  typedef boost::shared_ptr< ::ff_msgs::ArmGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::ArmGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ArmGoal_

typedef ::ff_msgs::ArmGoal_<std::allocator<void> > ArmGoal;

typedef boost::shared_ptr< ::ff_msgs::ArmGoal > ArmGoalPtr;
typedef boost::shared_ptr< ::ff_msgs::ArmGoal const> ArmGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::ArmGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::ArmGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::ArmGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::ArmGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::ArmGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::ArmGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::ArmGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::ArmGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::ArmGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2132b678d6b320fdf79bc08b99d42769";
  }

  static const char* value(const ::ff_msgs::ArmGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2132b678d6b320fdULL;
  static const uint64_t static_value2 = 0xf79bc08b99d42769ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::ArmGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/ArmGoal";
  }

  static const char* value(const ::ff_msgs::ArmGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::ArmGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# This message describes the ARM action offered by the PERCHING ARM\n\
\n\
uint8 command                                 # What to do\n\
uint8 ARM_STOP            = 0                 # Stop the arm (vel = 0)\n\
uint8 ARM_DEPLOY          = 1                 # Deploy the arm\n\
uint8 ARM_STOW            = 2                 # Retract the arm\n\
uint8 ARM_PAN             = 3                 # Pan the arm\n\
uint8 ARM_TILT            = 4                 # Tilt the arm\n\
uint8 ARM_MOVE            = 5                 # Pan and tilt the\n\
uint8 GRIPPER_SET         = 6                 # Set the gripper value\n\
uint8 GRIPPER_OPEN        = 7                 # Open the gripper\n\
uint8 GRIPPER_CLOSE       = 8                 # Close the gripper\n\
uint8 DISABLE_SERVO       = 9                 # Disable the servos\n\
\n\
float32 pan                                   # PAN from -90 to +90\n\
float32 tilt                                  # TILT from -120 to +90\n\
float32 gripper                               # SET from 20 to 45\n\
\n\
";
  }

  static const char* value(const ::ff_msgs::ArmGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::ArmGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.pan);
      stream.next(m.tilt);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::ArmGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::ArmGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "pan: ";
    Printer<float>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<float>::stream(s, indent + "  ", v.tilt);
    s << indent << "gripper: ";
    Printer<float>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_ARMGOAL_H
