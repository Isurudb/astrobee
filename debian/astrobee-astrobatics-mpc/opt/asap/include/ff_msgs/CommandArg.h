// Generated by gencpp from file ff_msgs/CommandArg.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_COMMANDARG_H
#define FF_MSGS_MESSAGE_COMMANDARG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct CommandArg_
{
  typedef CommandArg_<ContainerAllocator> Type;

  CommandArg_()
    : data_type(0)
    , b(false)
    , d(0.0)
    , f(0.0)
    , i(0)
    , ll(0)
    , s()
    , vec3d()
    , mat33f()  {
      vec3d.assign(0.0);

      mat33f.assign(0.0);
  }
  CommandArg_(const ContainerAllocator& _alloc)
    : data_type(0)
    , b(false)
    , d(0.0)
    , f(0.0)
    , i(0)
    , ll(0)
    , s(_alloc)
    , vec3d()
    , mat33f()  {
  (void)_alloc;
      vec3d.assign(0.0);

      mat33f.assign(0.0);
  }



   typedef uint8_t _data_type_type;
  _data_type_type data_type;

   typedef uint8_t _b_type;
  _b_type b;

   typedef double _d_type;
  _d_type d;

   typedef float _f_type;
  _f_type f;

   typedef int32_t _i_type;
  _i_type i;

   typedef int64_t _ll_type;
  _ll_type ll;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _s_type;
  _s_type s;

   typedef boost::array<double, 3>  _vec3d_type;
  _vec3d_type vec3d;

   typedef boost::array<float, 9>  _mat33f_type;
  _mat33f_type mat33f;



  enum {
    DATA_TYPE_BOOL = 0u,
    DATA_TYPE_DOUBLE = 1u,
    DATA_TYPE_FLOAT = 2u,
    DATA_TYPE_INT = 3u,
    DATA_TYPE_LONGLONG = 4u,
    DATA_TYPE_STRING = 5u,
    DATA_TYPE_VEC3d = 6u,
    DATA_TYPE_MAT33f = 7u,
  };


  typedef boost::shared_ptr< ::ff_msgs::CommandArg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::CommandArg_<ContainerAllocator> const> ConstPtr;

}; // struct CommandArg_

typedef ::ff_msgs::CommandArg_<std::allocator<void> > CommandArg;

typedef boost::shared_ptr< ::ff_msgs::CommandArg > CommandArgPtr;
typedef boost::shared_ptr< ::ff_msgs::CommandArg const> CommandArgConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::CommandArg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::CommandArg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::CommandArg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::CommandArg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::CommandArg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::CommandArg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::CommandArg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::CommandArg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::CommandArg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c64f399f685551792b2e185eb2878830";
  }

  static const char* value(const ::ff_msgs::CommandArg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc64f399f68555179ULL;
  static const uint64_t static_value2 = 0x2b2e185eb2878830ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::CommandArg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/CommandArg";
  }

  static const char* value(const ::ff_msgs::CommandArg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::CommandArg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# An argument to a command sent through RAPID\n\
#\n\
# Note that this is approximating a union in DDS. However, this is an\n\
# inefficient union, and thus each instance will take up at least 89 bytes.\n\
# However, even with the maximum of 16 arguments to a command, we only have\n\
# about 1k extra data. I, tfmorse, am ok with that. Commands are rarely sent.\n\
\n\
uint8 DATA_TYPE_BOOL     = 0\n\
uint8 DATA_TYPE_DOUBLE   = 1\n\
uint8 DATA_TYPE_FLOAT    = 2\n\
uint8 DATA_TYPE_INT      = 3\n\
uint8 DATA_TYPE_LONGLONG = 4\n\
uint8 DATA_TYPE_STRING   = 5\n\
uint8 DATA_TYPE_VEC3d    = 6\n\
uint8 DATA_TYPE_MAT33f   = 7\n\
\n\
uint8 data_type\n\
\n\
bool b\n\
float64 d\n\
float32 f\n\
int32 i\n\
int64 ll\n\
string s\n\
float64[3] vec3d\n\
float32[9] mat33f\n\
\n\
";
  }

  static const char* value(const ::ff_msgs::CommandArg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::CommandArg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data_type);
      stream.next(m.b);
      stream.next(m.d);
      stream.next(m.f);
      stream.next(m.i);
      stream.next(m.ll);
      stream.next(m.s);
      stream.next(m.vec3d);
      stream.next(m.mat33f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandArg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::CommandArg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::CommandArg_<ContainerAllocator>& v)
  {
    s << indent << "data_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data_type);
    s << indent << "b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "f: ";
    Printer<float>::stream(s, indent + "  ", v.f);
    s << indent << "i: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i);
    s << indent << "ll: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ll);
    s << indent << "s: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.s);
    s << indent << "vec3d[]" << std::endl;
    for (size_t i = 0; i < v.vec3d.size(); ++i)
    {
      s << indent << "  vec3d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vec3d[i]);
    }
    s << indent << "mat33f[]" << std::endl;
    for (size_t i = 0; i < v.mat33f.size(); ++i)
    {
      s << indent << "  mat33f[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mat33f[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_COMMANDARG_H
