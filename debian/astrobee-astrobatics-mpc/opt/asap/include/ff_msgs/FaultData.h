// Generated by gencpp from file ff_msgs/FaultData.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_FAULTDATA_H
#define FF_MSGS_MESSAGE_FAULTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct FaultData_
{
  typedef FaultData_<ContainerAllocator> Type;

  FaultData_()
    : key()
    , data_type(0)
    , f(0.0)
    , i(0)
    , s()  {
    }
  FaultData_(const ContainerAllocator& _alloc)
    : key(_alloc)
    , data_type(0)
    , f(0.0)
    , i(0)
    , s(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_type;
  _key_type key;

   typedef uint8_t _data_type_type;
  _data_type_type data_type;

   typedef float _f_type;
  _f_type f;

   typedef int32_t _i_type;
  _i_type i;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _s_type;
  _s_type s;



  enum {
    DATA_TYPE_FLOAT = 0u,
    DATA_TYPE_INT = 1u,
    DATA_TYPE_STRING = 2u,
  };


  typedef boost::shared_ptr< ::ff_msgs::FaultData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::FaultData_<ContainerAllocator> const> ConstPtr;

}; // struct FaultData_

typedef ::ff_msgs::FaultData_<std::allocator<void> > FaultData;

typedef boost::shared_ptr< ::ff_msgs::FaultData > FaultDataPtr;
typedef boost::shared_ptr< ::ff_msgs::FaultData const> FaultDataConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::FaultData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::FaultData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FaultData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::FaultData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FaultData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::FaultData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FaultData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::FaultData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::FaultData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "632c6de83aa53364cbd36514ffa5c853";
  }

  static const char* value(const ::ff_msgs::FaultData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x632c6de83aa53364ULL;
  static const uint64_t static_value2 = 0xcbd36514ffa5c853ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::FaultData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/FaultData";
  }

  static const char* value(const ::ff_msgs::FaultData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::FaultData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
# \n\
# Fault data messsage contains information of why the fault occurred\n\
\n\
uint8 DATA_TYPE_FLOAT   = 0   # Data in this msg is of type float\n\
uint8 DATA_TYPE_INT     = 1   # Data in this msg is of type int\n\
uint8 DATA_TYPE_STRING  = 2   # Data in this msg is of type string\n\
\n\
string key  # Specifies what the data in the msg is, can only be 32 chars long\n\
\n\
uint8 data_type   # Specifies the type of data in the message\n\
\n\
float32 f   # Value used for fault analysis, data_type must be 0\n\
int32 i     # Value used for fault analysis, data_type must be 1\n\
string s    # String used for fault analysis, data_type must be 2\n\
";
  }

  static const char* value(const ::ff_msgs::FaultData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::FaultData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
      stream.next(m.data_type);
      stream.next(m.f);
      stream.next(m.i);
      stream.next(m.s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaultData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::FaultData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::FaultData_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key);
    s << indent << "data_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data_type);
    s << indent << "f: ";
    Printer<float>::stream(s, indent + "  ", v.f);
    s << indent << "i: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i);
    s << indent << "s: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.s);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_FAULTDATA_H
