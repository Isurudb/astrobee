// Generated by gencpp from file ff_msgs/CpuStateStamped.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_CPUSTATESTAMPED_H
#define FF_MSGS_MESSAGE_CPUSTATESTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ff_msgs/CpuState.h>
#include <ff_msgs/CpuNodeState.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct CpuStateStamped_
{
  typedef CpuStateStamped_<ContainerAllocator> Type;

  CpuStateStamped_()
    : header()
    , name()
    , load_fields()
    , avg_loads()
    , temp(0.0)
    , cpus()
    , load_nodes()  {
    }
  CpuStateStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , load_fields(_alloc)
    , avg_loads(_alloc)
    , temp(0.0)
    , cpus(_alloc)
    , load_nodes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _load_fields_type;
  _load_fields_type load_fields;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _avg_loads_type;
  _avg_loads_type avg_loads;

   typedef float _temp_type;
  _temp_type temp;

   typedef std::vector< ::ff_msgs::CpuState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ff_msgs::CpuState_<ContainerAllocator> >::other >  _cpus_type;
  _cpus_type cpus;

   typedef std::vector< ::ff_msgs::CpuNodeState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ff_msgs::CpuNodeState_<ContainerAllocator> >::other >  _load_nodes_type;
  _load_nodes_type load_nodes;




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NICE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  USER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SYS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  VIRT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TOTAL;

  typedef boost::shared_ptr< ::ff_msgs::CpuStateStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::CpuStateStamped_<ContainerAllocator> const> ConstPtr;

}; // struct CpuStateStamped_

typedef ::ff_msgs::CpuStateStamped_<std::allocator<void> > CpuStateStamped;

typedef boost::shared_ptr< ::ff_msgs::CpuStateStamped > CpuStateStampedPtr;
typedef boost::shared_ptr< ::ff_msgs::CpuStateStamped const> CpuStateStampedConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CpuStateStamped_<ContainerAllocator>::NICE =
        
          "nice"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CpuStateStamped_<ContainerAllocator>::USER =
        
          "user"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CpuStateStamped_<ContainerAllocator>::SYS =
        
          "sys"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CpuStateStamped_<ContainerAllocator>::VIRT =
        
          "virt"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CpuStateStamped_<ContainerAllocator>::TOTAL =
        
          "total"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::CpuStateStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::CpuStateStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::CpuStateStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::CpuStateStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecff381c2d5b2d38dda690920e947e86";
  }

  static const char* value(const ::ff_msgs::CpuStateStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecff381c2d5b2d38ULL;
  static const uint64_t static_value2 = 0xdda690920e947e86ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/CpuStateStamped";
  }

  static const char* value(const ::ff_msgs::CpuStateStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Cpu state message with timestamp.\n\
\n\
# Header with timestamp\n\
std_msgs/Header header\n\
\n\
# Machine name (llp, hlp, mlp, etc)\n\
string name\n\
\n\
# Load constants\n\
string NICE=nice\n\
string USER=user\n\
string SYS=sys\n\
string VIRT=virt\n\
string TOTAL=total\n\
\n\
# The available fields within the load values, mostly uses the constants\n\
# defined above.\n\
string[] load_fields\n\
\n\
# Average loads for all processors combined\n\
float32[] avg_loads\n\
\n\
# Temperature for a cpu (average of all thermal zones)\n\
float32 temp\n\
\n\
# Information for each processor\n\
# Size of the array specifies how many processors are on the board, whether\n\
# or not all of them are enabled.\n\
ff_msgs/CpuState[] cpus\n\
\n\
# Load usage of individual ROS nodes\n\
ff_msgs/CpuNodeState[] load_nodes\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ff_msgs/CpuState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# State of a CPU.\n\
\n\
# Processor is on (enabled) or not\n\
bool enabled\n\
\n\
# The load (in percentages) of the cpu, for the fields given in\n\
# CpuStateStamped\n\
float32[] loads \n\
\n\
# Current operating frequency in Hz\n\
uint32 frequency\n\
\n\
# Max frequency (may be less than theoretical limit of the processor)\n\
uint32 max_frequency\n\
\n\
================================================================================\n\
MSG: ff_msgs/CpuNodeState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# State of a CPU load for a node.\n\
\n\
# Node name\n\
string name\n\
\n\
# The load (in percentages) of the cpu\n\
float32 load \n\
";
  }

  static const char* value(const ::ff_msgs::CpuStateStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.load_fields);
      stream.next(m.avg_loads);
      stream.next(m.temp);
      stream.next(m.cpus);
      stream.next(m.load_nodes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CpuStateStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::CpuStateStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::CpuStateStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "load_fields[]" << std::endl;
    for (size_t i = 0; i < v.load_fields.size(); ++i)
    {
      s << indent << "  load_fields[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.load_fields[i]);
    }
    s << indent << "avg_loads[]" << std::endl;
    for (size_t i = 0; i < v.avg_loads.size(); ++i)
    {
      s << indent << "  avg_loads[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.avg_loads[i]);
    }
    s << indent << "temp: ";
    Printer<float>::stream(s, indent + "  ", v.temp);
    s << indent << "cpus[]" << std::endl;
    for (size_t i = 0; i < v.cpus.size(); ++i)
    {
      s << indent << "  cpus[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ff_msgs::CpuState_<ContainerAllocator> >::stream(s, indent + "    ", v.cpus[i]);
    }
    s << indent << "load_nodes[]" << std::endl;
    for (size_t i = 0; i < v.load_nodes.size(); ++i)
    {
      s << indent << "  load_nodes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ff_msgs::CpuNodeState_<ContainerAllocator> >::stream(s, indent + "    ", v.load_nodes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_CPUSTATESTAMPED_H
