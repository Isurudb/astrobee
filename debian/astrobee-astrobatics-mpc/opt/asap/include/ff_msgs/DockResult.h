// Generated by gencpp from file ff_msgs/DockResult.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_DOCKRESULT_H
#define FF_MSGS_MESSAGE_DOCKRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct DockResult_
{
  typedef DockResult_<ContainerAllocator> Type;

  DockResult_()
    : response(0)
    , fsm_result()  {
    }
  DockResult_(const ContainerAllocator& _alloc)
    : response(0)
    , fsm_result(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _response_type;
  _response_type response;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fsm_result_type;
  _fsm_result_type fsm_result;



  enum {
    CANCELLED = 5,
    ALREADY_DOCKED = 4,
    ALREADY_UNDOCKED = 3,
    UNDOCKED = 2,
    DOCKED = 1,
    PREEMPTED = 0,
    INVALID_COMMAND = -1,
    INVALID_BERTH = -2,
    NOT_IN_UNDOCKED_STATE = -3,
    NOT_IN_DOCKED_STATE = -4,
    SWITCH_TO_ML_FAILED = -5,
    SWITCH_TO_AR_FAILED = -6,
    SWITCH_TO_NO_FAILED = -7,
    PREP_DISABLE_FAILED = -8,
    PREP_ENABLE_FAILED = -9,
    MOTION_APPROACH_FAILED = -10,
    MOTION_COMPLETE_FAILED = -11,
    MOTION_ATTACHED_FAILED = -12,
    EPS_UNDOCK_FAILED = -13,
    EPS_DOCK_FAILED = -14,
    TOO_FAR_AWAY_FROM_APPROACH = -15,
  };


  typedef boost::shared_ptr< ::ff_msgs::DockResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::DockResult_<ContainerAllocator> const> ConstPtr;

}; // struct DockResult_

typedef ::ff_msgs::DockResult_<std::allocator<void> > DockResult;

typedef boost::shared_ptr< ::ff_msgs::DockResult > DockResultPtr;
typedef boost::shared_ptr< ::ff_msgs::DockResult const> DockResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::DockResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::DockResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::DockResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::DockResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::DockResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::DockResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::DockResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::DockResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cc69ac3a301c7996578d2ee3e9b92a6";
  }

  static const char* value(const ::ff_msgs::DockResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cc69ac3a301c799ULL;
  static const uint64_t static_value2 = 0x6578d2ee3e9b92a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/DockResult";
  }

  static const char* value(const ::ff_msgs::DockResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# Result\n\
int32 response\n\
int32 CANCELLED                          = 5\n\
int32 ALREADY_DOCKED                     = 4\n\
int32 ALREADY_UNDOCKED                   = 3\n\
int32 UNDOCKED                           = 2\n\
int32 DOCKED                             = 1\n\
int32 PREEMPTED                          = 0\n\
int32 INVALID_COMMAND                    = -1\n\
int32 INVALID_BERTH                      = -2\n\
int32 NOT_IN_UNDOCKED_STATE              = -3\n\
int32 NOT_IN_DOCKED_STATE                = -4\n\
int32 SWITCH_TO_ML_FAILED                = -5\n\
int32 SWITCH_TO_AR_FAILED                = -6\n\
int32 SWITCH_TO_NO_FAILED                = -7\n\
int32 PREP_DISABLE_FAILED                = -8\n\
int32 PREP_ENABLE_FAILED                 = -9\n\
int32 MOTION_APPROACH_FAILED             = -10\n\
int32 MOTION_COMPLETE_FAILED             = -11\n\
int32 MOTION_ATTACHED_FAILED             = -12\n\
int32 EPS_UNDOCK_FAILED                  = -13\n\
int32 EPS_DOCK_FAILED                    = -14\n\
int32 TOO_FAR_AWAY_FROM_APPROACH         = -15\n\
\n\
# Human readable FSM result for debugging\n\
string fsm_result\n\
\n\
";
  }

  static const char* value(const ::ff_msgs::DockResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::DockResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.response);
      stream.next(m.fsm_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::DockResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::DockResult_<ContainerAllocator>& v)
  {
    s << indent << "response: ";
    Printer<int32_t>::stream(s, indent + "  ", v.response);
    s << indent << "fsm_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fsm_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_DOCKRESULT_H
