// Generated by gencpp from file ff_msgs/MobilityState.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_MOBILITYSTATE_H
#define FF_MSGS_MESSAGE_MOBILITYSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct MobilityState_
{
  typedef MobilityState_<ContainerAllocator> Type;

  MobilityState_()
    : state(0)
    , sub_state(0)  {
    }
  MobilityState_(const ContainerAllocator& _alloc)
    : state(0)
    , sub_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef int32_t _sub_state_type;
  _sub_state_type sub_state;



  enum {
    DRIFTING = 0u,
    STOPPING = 1u,
    FLYING = 2u,
    DOCKING = 3u,
    PERCHING = 4u,
  };


  typedef boost::shared_ptr< ::ff_msgs::MobilityState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::MobilityState_<ContainerAllocator> const> ConstPtr;

}; // struct MobilityState_

typedef ::ff_msgs::MobilityState_<std::allocator<void> > MobilityState;

typedef boost::shared_ptr< ::ff_msgs::MobilityState > MobilityStatePtr;
typedef boost::shared_ptr< ::ff_msgs::MobilityState const> MobilityStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::MobilityState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::MobilityState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::MobilityState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::MobilityState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::MobilityState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::MobilityState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::MobilityState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::MobilityState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::MobilityState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c5f9184aace6b4675fe28aa28d9047e";
  }

  static const char* value(const ::ff_msgs::MobilityState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c5f9184aace6b46ULL;
  static const uint64_t static_value2 = 0x75fe28aa28d9047eULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::MobilityState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/MobilityState";
  }

  static const char* value(const ::ff_msgs::MobilityState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::MobilityState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Mobility states, based off the enumeration constants in\n\
# rapid::ext::astrobee::AgentState\n\
#\n\
# *MUST* be kept in sync with the DDS IDL file in astrobee_common\n\
\n\
uint8 DRIFTING        = 0   # Astrobee's propulsion is off\n\
uint8 STOPPING        = 1   # Astrobee is either stopping or stopped\n\
uint8 FLYING          = 2   # Astrobee is flying\n\
uint8 DOCKING         = 3   # Astrobee is either docking or undocking\n\
uint8 PERCHING        = 4   # Astrobee is either perching or unperching\n\
\n\
# Mobility state\n\
uint8 state\n\
\n\
# Specifies the progress of the action. For docking, this value can be N to -N\n\
# where N through 1 specifies the progress of a docking action, 0 is docked, and\n\
# -1 through -N specifies the process of an undocking action. For stopping, this\n\
# value is either 1 or 0 where 1 means the robot is coming to a stop and 0 means\n\
# the robot is stopped. For perching, this value can be N to -N where N through\n\
# 1 specifies the progress of a perching action, 0 is perched, and -1 through\n\
# -N specifies the process of an unperching action.\n\
int32 sub_state\n\
";
  }

  static const char* value(const ::ff_msgs::MobilityState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::MobilityState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.sub_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MobilityState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::MobilityState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::MobilityState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "sub_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_MOBILITYSTATE_H
