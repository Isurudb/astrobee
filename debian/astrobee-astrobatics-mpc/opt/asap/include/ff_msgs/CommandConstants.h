// Generated by gencpp from file ff_msgs/CommandConstants.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_COMMANDCONSTANTS_H
#define FF_MSGS_MESSAGE_COMMANDCONSTANTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ff_msgs
{
template <class ContainerAllocator>
struct CommandConstants_
{
  typedef CommandConstants_<ContainerAllocator> Type;

  CommandConstants_()
    {
    }
  CommandConstants_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }






  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_LOCALIZATION_MODE_NONE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_LOCALIZATION_MODE_MAPPED_LANDMARKS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_LOCALIZATION_MODE_ARTAGS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_LOCALIZATION_MODE_HANDRAIL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_LOCALIZATION_MODE_PERCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_LOCALIZATION_MODE_TRUTH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_ACTION_TYPE_PAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_ACTION_TYPE_TILT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_ACTION_TYPE_BOTH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_POWERED_COMPONENT_LASER_POINTER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_POWERED_COMPONENT_PAYLOAD_TOP_AFT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_POWERED_COMPONENT_PAYLOAD_BOTTOM_AFT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_POWERED_COMPONENT_PAYLOAD_BOTTOM_FRONT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_POWERED_COMPONENT_PMCS_AND_SIGNAL_LIGHTS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_MODE_BOTH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_MODE_RECORDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_MODE_STREAMING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_NAME_SCI;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_NAME_NAV;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_NAME_HAZ;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_NAME_DOCK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_NAME_PERCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_224X171;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_320X240;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_480X270;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_640X480;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_960X540;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_1024X768;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_1280X720;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_1280X960;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_CAMERA_RESOLUTION_1920X1080;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLASHLIGHT_LOCATION_BACK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLASHLIGHT_LOCATION_FRONT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLIGHT_MODE_OFF;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLIGHT_MODE_QUIET;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLIGHT_MODE_NOMINAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLIGHT_MODE_DIFFICULT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_FLIGHT_MODE_PRECISION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_PLANNER_TYPE_TRAPEZOIDAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_PLANNER_TYPE_QUADRATIC_PROGRAM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_COMM_STATUS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_CPU_STATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_DISK_STATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_EKF_STATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_GNC_STATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_PMC_CMD_STATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_POSITION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PARAM_NAME_TELEMETRY_TYPE_SPARSE_MAPPING_POSE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_GRAB_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_REQUEST_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_FAULT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_INITIALIZE_BIAS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_LOAD_NODELET;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_NO_OP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_REACQUIRE_POSITION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_RESET_EKF;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SWITCH_LOCALIZATION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_UNLOAD_NODELET;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_UNTERMINATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_WAKE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_WAKE_SAFE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_ARM_PAN_AND_TILT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_DEPLOY_ARM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_GRIPPER_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_STOP_ARM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_STOW_ARM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_DATA_TO_DISK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_START_RECORDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_STOP_RECORDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_CUSTOM_GUEST_SCIENCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_START_GUEST_SCIENCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_STOP_GUEST_SCIENCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_AUTO_RETURN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_DOCK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_IDLE_PROPULSION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_PERCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_PREPARE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SIMPLE_MOVE6DOF;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_STOP_ALL_MOTION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_UNDOCK;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_UNPERCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_PAUSE_PLAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_RUN_PLAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_PLAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SKIP_PLAN_STEP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_WAIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_POWER_OFF_ITEM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_POWER_ON_ITEM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_CAMERA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_CAMERA_RECORDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_CAMERA_STREAMING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_CHECK_OBSTACLES;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_CHECK_ZONES;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_ENABLE_AUTO_RETURN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_ENABLE_IMMEDIATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_ENABLE_REPLAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_FLASHLIGHT_BRIGHTNESS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_HOLONOMIC_MODE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_INERTIA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_OPERATING_LIMITS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_PLANNER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_TELEMETRY_RATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_NAME_SET_ZONES;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_ACCESS_CONTROL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_ADMIN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_ARM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_DATA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_GUEST_SCIENCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_MOBILITY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_PLAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_POWER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CMD_SUBSYS_SETTINGS;

  typedef boost::shared_ptr< ::ff_msgs::CommandConstants_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::CommandConstants_<ContainerAllocator> const> ConstPtr;

}; // struct CommandConstants_

typedef ::ff_msgs::CommandConstants_<std::allocator<void> > CommandConstants;

typedef boost::shared_ptr< ::ff_msgs::CommandConstants > CommandConstantsPtr;
typedef boost::shared_ptr< ::ff_msgs::CommandConstants const> CommandConstantsConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_LOCALIZATION_MODE_NONE =
        
          "None"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_LOCALIZATION_MODE_MAPPED_LANDMARKS =
        
          "MappedLandmarks"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_LOCALIZATION_MODE_ARTAGS =
        
          "ARTags"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_LOCALIZATION_MODE_HANDRAIL =
        
          "Handrail"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_LOCALIZATION_MODE_PERCH =
        
          "Perch"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_LOCALIZATION_MODE_TRUTH =
        
          "Truth"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_ACTION_TYPE_PAN =
        
          "Pan"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_ACTION_TYPE_TILT =
        
          "Tilt"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_ACTION_TYPE_BOTH =
        
          "Both"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_POWERED_COMPONENT_LASER_POINTER =
        
          "Laser Pointer"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_POWERED_COMPONENT_PAYLOAD_TOP_AFT =
        
          "Payload Top Aft"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_POWERED_COMPONENT_PAYLOAD_BOTTOM_AFT =
        
          "Payload Bottom Aft"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_POWERED_COMPONENT_PAYLOAD_BOTTOM_FRONT =
        
          "Payload Bottom Front"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_POWERED_COMPONENT_PMCS_AND_SIGNAL_LIGHTS =
        
          "PMC"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_MODE_BOTH =
        
          "Both"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_MODE_RECORDING =
        
          "Recording"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_MODE_STREAMING =
        
          "Streaming"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_NAME_SCI =
        
          "Science"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_NAME_NAV =
        
          "Navigation"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_NAME_HAZ =
        
          "Hazard"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_NAME_DOCK =
        
          "Dock"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_NAME_PERCH =
        
          "Perch"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_224X171 =
        
          "224x171"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_320X240 =
        
          "320x240"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_480X270 =
        
          "480x270"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_640X480 =
        
          "640x480"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_960X540 =
        
          "960x540"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_1024X768 =
        
          "1024x768"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_1280X720 =
        
          "1280x720"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_1280X960 =
        
          "1280x960"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_CAMERA_RESOLUTION_1920X1080 =
        
          "1920x1080"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLASHLIGHT_LOCATION_BACK =
        
          "Back"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLASHLIGHT_LOCATION_FRONT =
        
          "Front"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLIGHT_MODE_OFF =
        
          "off"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLIGHT_MODE_QUIET =
        
          "quiet"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLIGHT_MODE_NOMINAL =
        
          "nominal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLIGHT_MODE_DIFFICULT =
        
          "difficult"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_FLIGHT_MODE_PRECISION =
        
          "precision"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_PLANNER_TYPE_TRAPEZOIDAL =
        
          "trapezoidal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_PLANNER_TYPE_QUADRATIC_PROGRAM =
        
          "qp"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_COMM_STATUS =
        
          "CommStatus"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_CPU_STATE =
        
          "CpuState"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_DISK_STATE =
        
          "DiskState"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_EKF_STATE =
        
          "EkfState"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_GNC_STATE =
        
          "GncState"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_PMC_CMD_STATE =
        
          "PmcCmdState"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_POSITION =
        
          "Position"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::PARAM_NAME_TELEMETRY_TYPE_SPARSE_MAPPING_POSE =
        
          "SparseMappingPose"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_GRAB_CONTROL =
        
          "grabControl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_REQUEST_CONTROL =
        
          "requestControl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_FAULT =
        
          "fault"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_INITIALIZE_BIAS =
        
          "initializeBias"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_LOAD_NODELET =
        
          "loadNodelet"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_NO_OP =
        
          "noOp"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_REACQUIRE_POSITION =
        
          "reacquirePosition"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_RESET_EKF =
        
          "resetEkf"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SWITCH_LOCALIZATION =
        
          "switchLocalization"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_UNLOAD_NODELET =
        
          "unloadNodelet"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_UNTERMINATE =
        
          "unterminate"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_WAKE =
        
          "wake"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_WAKE_SAFE =
        
          "wakeSafe"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_ARM_PAN_AND_TILT =
        
          "armPanAndTilt"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_DEPLOY_ARM =
        
          "deployArm"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_GRIPPER_CONTROL =
        
          "gripperControl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_STOP_ARM =
        
          "stopArm"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_STOW_ARM =
        
          "stowArm"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_DATA_TO_DISK =
        
          "setDataToDisk"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_START_RECORDING =
        
          "startRecording"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_STOP_RECORDING =
        
          "stopRecording"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_CUSTOM_GUEST_SCIENCE =
        
          "customGuestScience"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_START_GUEST_SCIENCE =
        
          "startGuestScience"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_STOP_GUEST_SCIENCE =
        
          "stopGuestScience"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_AUTO_RETURN =
        
          "autoReturn"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_DOCK =
        
          "dock"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_IDLE_PROPULSION =
        
          "idlePropulsion"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_PERCH =
        
          "perch"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_PREPARE =
        
          "prepare"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SIMPLE_MOVE6DOF =
        
          "simpleMove6DOF"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_STOP_ALL_MOTION =
        
          "stopAllMotion"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_UNDOCK =
        
          "undock"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_UNPERCH =
        
          "unperch"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_PAUSE_PLAN =
        
          "pausePlan"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_RUN_PLAN =
        
          "runPlan"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_PLAN =
        
          "setPlan"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SKIP_PLAN_STEP =
        
          "skipPlanStep"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_WAIT =
        
          "wait"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_POWER_OFF_ITEM =
        
          "powerOffItem"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_POWER_ON_ITEM =
        
          "powerOnItem"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_CAMERA =
        
          "setCamera"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_CAMERA_RECORDING =
        
          "setCameraRecording"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_CAMERA_STREAMING =
        
          "setCameraStreaming"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_CHECK_OBSTACLES =
        
          "setCheckObstacles"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_CHECK_ZONES =
        
          "setCheckZones"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_ENABLE_AUTO_RETURN =
        
          "setEnableAutoReturn"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_ENABLE_IMMEDIATE =
        
          "setEnableImmediate"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_ENABLE_REPLAN =
        
          "setEnableReplan"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_FLASHLIGHT_BRIGHTNESS =
        
          "setFlashlightBrightness"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_HOLONOMIC_MODE =
        
          "setHolonomicMode"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_INERTIA =
        
          "setInertia"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_OPERATING_LIMITS =
        
          "setOperatingLimits"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_PLANNER =
        
          "setPlanner"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_TELEMETRY_RATE =
        
          "setTelemetryRate"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_NAME_SET_ZONES =
        
          "setZones"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_ACCESS_CONTROL =
        
          "AccessControl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_ADMIN =
        
          "Admin"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_ARM =
        
          "Arm"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_DATA =
        
          "Data"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_GUEST_SCIENCE =
        
          "GuestScience"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_MOBILITY =
        
          "Mobility"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_PLAN =
        
          "Plan"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_POWER =
        
          "Power"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommandConstants_<ContainerAllocator>::CMD_SUBSYS_SETTINGS =
        
          "Settings"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::CommandConstants_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::CommandConstants_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::CommandConstants_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::CommandConstants_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::CommandConstants_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::CommandConstants_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::CommandConstants_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::CommandConstants_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::CommandConstants_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1f0fb85668017d10454dc888758cac6";
  }

  static const char* value(const ::ff_msgs::CommandConstants_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1f0fb85668017d1ULL;
  static const uint64_t static_value2 = 0x0454dc888758cac6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::CommandConstants_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/CommandConstants";
  }

  static const char* value(const ::ff_msgs::CommandConstants_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::CommandConstants_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2015 United States Government as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# All Rights Reserved.\n\
\n\
string PARAM_NAME_LOCALIZATION_MODE_NONE = None\n\
string PARAM_NAME_LOCALIZATION_MODE_MAPPED_LANDMARKS = MappedLandmarks\n\
string PARAM_NAME_LOCALIZATION_MODE_ARTAGS = ARTags\n\
string PARAM_NAME_LOCALIZATION_MODE_HANDRAIL = Handrail\n\
string PARAM_NAME_LOCALIZATION_MODE_PERCH = Perch\n\
string PARAM_NAME_LOCALIZATION_MODE_TRUTH = Truth\n\
string PARAM_NAME_ACTION_TYPE_PAN = Pan\n\
string PARAM_NAME_ACTION_TYPE_TILT = Tilt\n\
string PARAM_NAME_ACTION_TYPE_BOTH = Both\n\
string PARAM_NAME_POWERED_COMPONENT_LASER_POINTER = Laser Pointer\n\
string PARAM_NAME_POWERED_COMPONENT_PAYLOAD_TOP_AFT = Payload Top Aft\n\
string PARAM_NAME_POWERED_COMPONENT_PAYLOAD_BOTTOM_AFT = Payload Bottom Aft\n\
string PARAM_NAME_POWERED_COMPONENT_PAYLOAD_BOTTOM_FRONT = Payload Bottom Front\n\
string PARAM_NAME_POWERED_COMPONENT_PMCS_AND_SIGNAL_LIGHTS = PMC\n\
string PARAM_NAME_CAMERA_MODE_BOTH = Both\n\
string PARAM_NAME_CAMERA_MODE_RECORDING = Recording\n\
string PARAM_NAME_CAMERA_MODE_STREAMING = Streaming\n\
string PARAM_NAME_CAMERA_NAME_SCI = Science\n\
string PARAM_NAME_CAMERA_NAME_NAV = Navigation\n\
string PARAM_NAME_CAMERA_NAME_HAZ = Hazard\n\
string PARAM_NAME_CAMERA_NAME_DOCK = Dock\n\
string PARAM_NAME_CAMERA_NAME_PERCH = Perch\n\
string PARAM_NAME_CAMERA_RESOLUTION_224X171 = 224x171\n\
string PARAM_NAME_CAMERA_RESOLUTION_320X240 = 320x240\n\
string PARAM_NAME_CAMERA_RESOLUTION_480X270 = 480x270\n\
string PARAM_NAME_CAMERA_RESOLUTION_640X480 = 640x480\n\
string PARAM_NAME_CAMERA_RESOLUTION_960X540 = 960x540\n\
string PARAM_NAME_CAMERA_RESOLUTION_1024X768 = 1024x768\n\
string PARAM_NAME_CAMERA_RESOLUTION_1280X720 = 1280x720\n\
string PARAM_NAME_CAMERA_RESOLUTION_1280X960 = 1280x960\n\
string PARAM_NAME_CAMERA_RESOLUTION_1920X1080 = 1920x1080\n\
string PARAM_NAME_FLASHLIGHT_LOCATION_BACK = Back\n\
string PARAM_NAME_FLASHLIGHT_LOCATION_FRONT = Front\n\
string PARAM_NAME_FLIGHT_MODE_OFF = off\n\
string PARAM_NAME_FLIGHT_MODE_QUIET = quiet\n\
string PARAM_NAME_FLIGHT_MODE_NOMINAL = nominal\n\
string PARAM_NAME_FLIGHT_MODE_DIFFICULT = difficult\n\
string PARAM_NAME_FLIGHT_MODE_PRECISION = precision\n\
string PARAM_NAME_PLANNER_TYPE_TRAPEZOIDAL = trapezoidal\n\
string PARAM_NAME_PLANNER_TYPE_QUADRATIC_PROGRAM = qp\n\
string PARAM_NAME_TELEMETRY_TYPE_COMM_STATUS = CommStatus\n\
string PARAM_NAME_TELEMETRY_TYPE_CPU_STATE = CpuState\n\
string PARAM_NAME_TELEMETRY_TYPE_DISK_STATE = DiskState\n\
string PARAM_NAME_TELEMETRY_TYPE_EKF_STATE = EkfState\n\
string PARAM_NAME_TELEMETRY_TYPE_GNC_STATE = GncState\n\
string PARAM_NAME_TELEMETRY_TYPE_PMC_CMD_STATE = PmcCmdState\n\
string PARAM_NAME_TELEMETRY_TYPE_POSITION = Position\n\
string PARAM_NAME_TELEMETRY_TYPE_SPARSE_MAPPING_POSE = SparseMappingPose\n\
\n\
string CMD_NAME_GRAB_CONTROL = grabControl\n\
string CMD_NAME_REQUEST_CONTROL = requestControl\n\
string CMD_NAME_FAULT = fault\n\
string CMD_NAME_INITIALIZE_BIAS = initializeBias\n\
string CMD_NAME_LOAD_NODELET = loadNodelet\n\
string CMD_NAME_NO_OP = noOp\n\
string CMD_NAME_REACQUIRE_POSITION = reacquirePosition\n\
string CMD_NAME_RESET_EKF = resetEkf\n\
string CMD_NAME_SWITCH_LOCALIZATION = switchLocalization\n\
string CMD_NAME_UNLOAD_NODELET = unloadNodelet\n\
string CMD_NAME_UNTERMINATE = unterminate\n\
string CMD_NAME_WAKE = wake\n\
string CMD_NAME_WAKE_SAFE = wakeSafe\n\
string CMD_NAME_ARM_PAN_AND_TILT = armPanAndTilt\n\
string CMD_NAME_DEPLOY_ARM = deployArm\n\
string CMD_NAME_GRIPPER_CONTROL = gripperControl\n\
string CMD_NAME_STOP_ARM = stopArm\n\
string CMD_NAME_STOW_ARM = stowArm\n\
string CMD_NAME_SET_DATA_TO_DISK = setDataToDisk\n\
string CMD_NAME_START_RECORDING = startRecording\n\
string CMD_NAME_STOP_RECORDING = stopRecording\n\
string CMD_NAME_CUSTOM_GUEST_SCIENCE = customGuestScience\n\
string CMD_NAME_START_GUEST_SCIENCE = startGuestScience\n\
string CMD_NAME_STOP_GUEST_SCIENCE = stopGuestScience\n\
string CMD_NAME_AUTO_RETURN = autoReturn\n\
string CMD_NAME_DOCK = dock\n\
string CMD_NAME_IDLE_PROPULSION = idlePropulsion\n\
string CMD_NAME_PERCH = perch\n\
string CMD_NAME_PREPARE = prepare\n\
string CMD_NAME_SIMPLE_MOVE6DOF = simpleMove6DOF\n\
string CMD_NAME_STOP_ALL_MOTION = stopAllMotion\n\
string CMD_NAME_UNDOCK = undock\n\
string CMD_NAME_UNPERCH = unperch\n\
string CMD_NAME_PAUSE_PLAN = pausePlan\n\
string CMD_NAME_RUN_PLAN = runPlan\n\
string CMD_NAME_SET_PLAN = setPlan\n\
string CMD_NAME_SKIP_PLAN_STEP = skipPlanStep\n\
string CMD_NAME_WAIT = wait\n\
string CMD_NAME_POWER_OFF_ITEM = powerOffItem\n\
string CMD_NAME_POWER_ON_ITEM = powerOnItem\n\
string CMD_NAME_SET_CAMERA = setCamera\n\
string CMD_NAME_SET_CAMERA_RECORDING = setCameraRecording\n\
string CMD_NAME_SET_CAMERA_STREAMING = setCameraStreaming\n\
string CMD_NAME_SET_CHECK_OBSTACLES = setCheckObstacles\n\
string CMD_NAME_SET_CHECK_ZONES = setCheckZones\n\
string CMD_NAME_SET_ENABLE_AUTO_RETURN = setEnableAutoReturn\n\
string CMD_NAME_SET_ENABLE_IMMEDIATE = setEnableImmediate\n\
string CMD_NAME_SET_ENABLE_REPLAN = setEnableReplan\n\
string CMD_NAME_SET_FLASHLIGHT_BRIGHTNESS = setFlashlightBrightness\n\
string CMD_NAME_SET_HOLONOMIC_MODE = setHolonomicMode\n\
string CMD_NAME_SET_INERTIA = setInertia\n\
string CMD_NAME_SET_OPERATING_LIMITS = setOperatingLimits\n\
string CMD_NAME_SET_PLANNER = setPlanner\n\
string CMD_NAME_SET_TELEMETRY_RATE = setTelemetryRate\n\
string CMD_NAME_SET_ZONES = setZones\n\
\n\
string CMD_SUBSYS_ACCESS_CONTROL = AccessControl\n\
string CMD_SUBSYS_ADMIN = Admin\n\
string CMD_SUBSYS_ARM = Arm\n\
string CMD_SUBSYS_DATA = Data\n\
string CMD_SUBSYS_GUEST_SCIENCE = GuestScience\n\
string CMD_SUBSYS_MOBILITY = Mobility\n\
string CMD_SUBSYS_PLAN = Plan\n\
string CMD_SUBSYS_POWER = Power\n\
string CMD_SUBSYS_SETTINGS = Settings\n\
";
  }

  static const char* value(const ::ff_msgs::CommandConstants_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::CommandConstants_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandConstants_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::CommandConstants_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::ff_msgs::CommandConstants_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_COMMANDCONSTANTS_H
