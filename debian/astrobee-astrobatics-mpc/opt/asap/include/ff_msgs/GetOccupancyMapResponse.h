// Generated by gencpp from file ff_msgs/GetOccupancyMapResponse.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_GETOCCUPANCYMAPRESPONSE_H
#define FF_MSGS_MESSAGE_GETOCCUPANCYMAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct GetOccupancyMapResponse_
{
  typedef GetOccupancyMapResponse_<ContainerAllocator> Type;

  GetOccupancyMapResponse_()
    : timestamp()
    , map()
    , origin()
    , dim()
    , resolution(0.0)  {
    }
  GetOccupancyMapResponse_(const ContainerAllocator& _alloc)
    : timestamp()
    , map(_alloc)
    , origin(_alloc)
    , dim(_alloc)
    , resolution(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _map_type;
  _map_type map;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dim_type;
  _dim_type dim;

   typedef float _resolution_type;
  _resolution_type resolution;





  typedef boost::shared_ptr< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetOccupancyMapResponse_

typedef ::ff_msgs::GetOccupancyMapResponse_<std::allocator<void> > GetOccupancyMapResponse;

typedef boost::shared_ptr< ::ff_msgs::GetOccupancyMapResponse > GetOccupancyMapResponsePtr;
typedef boost::shared_ptr< ::ff_msgs::GetOccupancyMapResponse const> GetOccupancyMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7424633971d7f4a5e61061b696c2c185";
  }

  static const char* value(const ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7424633971d7f4a5ULL;
  static const uint64_t static_value2 = 0xe61061b696c2c185ULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/GetOccupancyMapResponse";
  }

  static const char* value(const ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time timestamp\n\
\n\
int8[] map\n\
geometry_msgs/Vector3 origin\n\
geometry_msgs/Vector3 dim\n\
float32 resolution\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.map);
      stream.next(m.origin);
      stream.next(m.dim);
      stream.next(m.resolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetOccupancyMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::GetOccupancyMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.map[i]);
    }
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "dim: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dim);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_GETOCCUPANCYMAPRESPONSE_H
