// Generated by gencpp from file ff_msgs/MotionFeedback.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_MOTIONFEEDBACK_H
#define FF_MSGS_MESSAGE_MOTIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ff_msgs/MotionState.h>
#include <ff_msgs/ControlFeedback.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct MotionFeedback_
{
  typedef MotionFeedback_<ContainerAllocator> Type;

  MotionFeedback_()
    : state()
    , progress()
    , perc_complete(0.0)
    , secs_remaining(0.0)  {
    }
  MotionFeedback_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , progress(_alloc)
    , perc_complete(0.0)
    , secs_remaining(0.0)  {
  (void)_alloc;
    }



   typedef  ::ff_msgs::MotionState_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::ff_msgs::ControlFeedback_<ContainerAllocator>  _progress_type;
  _progress_type progress;

   typedef float _perc_complete_type;
  _perc_complete_type perc_complete;

   typedef float _secs_remaining_type;
  _secs_remaining_type secs_remaining;





  typedef boost::shared_ptr< ::ff_msgs::MotionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::MotionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MotionFeedback_

typedef ::ff_msgs::MotionFeedback_<std::allocator<void> > MotionFeedback;

typedef boost::shared_ptr< ::ff_msgs::MotionFeedback > MotionFeedbackPtr;
typedef boost::shared_ptr< ::ff_msgs::MotionFeedback const> MotionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::MotionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::MotionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::MotionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::MotionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::MotionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a70f7ffb0db5b74cf7c14491a515651c";
  }

  static const char* value(const ::ff_msgs::MotionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa70f7ffb0db5b74cULL;
  static const uint64_t static_value2 = 0xf7c14491a515651cULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/MotionFeedback";
  }

  static const char* value(const ::ff_msgs::MotionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# The state of the teleop command\n\
ff_msgs/MotionState state\n\
\n\
# Control progress\n\
ff_msgs/ControlFeedback progress\n\
\n\
# Planner progress\n\
float32 perc_complete\n\
float32 secs_remaining\n\
\n\
\n\
================================================================================\n\
MSG: ff_msgs/MotionState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
#\n\
# All rights reserved.\n\
#\n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
#\n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
#\n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Locked topic that registers updates to the internal dock state\n\
\n\
# Header with timestamp\n\
std_msgs/Header header\n\
\n\
# The state of the mobility subsystem\n\
int8 state\n\
int8 INITIALIZING        = 0\n\
int8 IDLE                = 1\n\
int8 STOPPED             = 2\n\
int8 IDLING              = 3\n\
int8 STOPPING            = 4\n\
int8 PREPPING            = 5\n\
int8 BOOTSTRAPPING       = 6\n\
int8 PLANNING            = 7\n\
int8 PREPARING           = 8\n\
int8 CONTROLLING         = 9\n\
int8 REPLANNING          = 10\n\
int8 HALTING             = 11\n\
int8 REPLAN_WAIT         = 12\n\
\n\
# A human readble version of the (event) -> [state] transition\n\
string fsm_event\n\
string fsm_state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ff_msgs/ControlFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
uint32 index                                # Index being processed\n\
\n\
ff_msgs/ControlState setpoint               # Current setpoint\n\
\n\
float32 error_position                      # Position error\n\
float32 error_attitude                      # Attitude error\n\
float32 error_velocity                      # Velocity error\n\
float32 error_omega                         # Omega error\n\
\n\
\n\
================================================================================\n\
MSG: ff_msgs/ControlState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Full state vector containing Time, Pose, Vel, and Accel\n\
# \n\
# when {time}\n\
# flight_mode {string} - disctates, gains, tolerances, etc.\n\
# pose {Point position, Quaternion orientation}\n\
# twist {Vector3 linear, Vector3 angular}\n\
# accel {Vector3 linear, Vector3 angular}\n\
\n\
time when\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist twist\n\
geometry_msgs/Twist accel\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ff_msgs::MotionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.progress);
      stream.next(m.perc_complete);
      stream.next(m.secs_remaining);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::MotionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::MotionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::ff_msgs::MotionState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "progress: ";
    s << std::endl;
    Printer< ::ff_msgs::ControlFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.progress);
    s << indent << "perc_complete: ";
    Printer<float>::stream(s, indent + "  ", v.perc_complete);
    s << indent << "secs_remaining: ";
    Printer<float>::stream(s, indent + "  ", v.secs_remaining);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_MOTIONFEEDBACK_H
