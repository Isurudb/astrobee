// Generated by gencpp from file ff_msgs/AgentStateStamped.msg
// DO NOT EDIT!


#ifndef FF_MSGS_MESSAGE_AGENTSTATESTAMPED_H
#define FF_MSGS_MESSAGE_AGENTSTATESTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ff_msgs/OpState.h>
#include <ff_msgs/ExecState.h>
#include <ff_msgs/ExecState.h>
#include <ff_msgs/MobilityState.h>

namespace ff_msgs
{
template <class ContainerAllocator>
struct AgentStateStamped_
{
  typedef AgentStateStamped_<ContainerAllocator> Type;

  AgentStateStamped_()
    : header()
    , operating_state()
    , plan_execution_state()
    , guest_science_state()
    , mobility_state()
    , proximity(0.0)
    , profile_name()
    , flight_mode()
    , target_linear_velocity(0.0)
    , target_linear_accel(0.0)
    , target_angular_velocity(0.0)
    , target_angular_accel(0.0)
    , collision_distance(0.0)
    , holonomic_enabled(false)
    , check_obstacles(false)
    , check_zones(false)
    , auto_return_enabled(false)
    , immediate_enabled(false)
    , planner()
    , replanning_enabled(false)
    , world()
    , boot_time(0)  {
    }
  AgentStateStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , operating_state(_alloc)
    , plan_execution_state(_alloc)
    , guest_science_state(_alloc)
    , mobility_state(_alloc)
    , proximity(0.0)
    , profile_name(_alloc)
    , flight_mode(_alloc)
    , target_linear_velocity(0.0)
    , target_linear_accel(0.0)
    , target_angular_velocity(0.0)
    , target_angular_accel(0.0)
    , collision_distance(0.0)
    , holonomic_enabled(false)
    , check_obstacles(false)
    , check_zones(false)
    , auto_return_enabled(false)
    , immediate_enabled(false)
    , planner(_alloc)
    , replanning_enabled(false)
    , world(_alloc)
    , boot_time(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ff_msgs::OpState_<ContainerAllocator>  _operating_state_type;
  _operating_state_type operating_state;

   typedef  ::ff_msgs::ExecState_<ContainerAllocator>  _plan_execution_state_type;
  _plan_execution_state_type plan_execution_state;

   typedef  ::ff_msgs::ExecState_<ContainerAllocator>  _guest_science_state_type;
  _guest_science_state_type guest_science_state;

   typedef  ::ff_msgs::MobilityState_<ContainerAllocator>  _mobility_state_type;
  _mobility_state_type mobility_state;

   typedef float _proximity_type;
  _proximity_type proximity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _profile_name_type;
  _profile_name_type profile_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flight_mode_type;
  _flight_mode_type flight_mode;

   typedef float _target_linear_velocity_type;
  _target_linear_velocity_type target_linear_velocity;

   typedef float _target_linear_accel_type;
  _target_linear_accel_type target_linear_accel;

   typedef float _target_angular_velocity_type;
  _target_angular_velocity_type target_angular_velocity;

   typedef float _target_angular_accel_type;
  _target_angular_accel_type target_angular_accel;

   typedef float _collision_distance_type;
  _collision_distance_type collision_distance;

   typedef uint8_t _holonomic_enabled_type;
  _holonomic_enabled_type holonomic_enabled;

   typedef uint8_t _check_obstacles_type;
  _check_obstacles_type check_obstacles;

   typedef uint8_t _check_zones_type;
  _check_zones_type check_zones;

   typedef uint8_t _auto_return_enabled_type;
  _auto_return_enabled_type auto_return_enabled;

   typedef uint8_t _immediate_enabled_type;
  _immediate_enabled_type immediate_enabled;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _planner_type;
  _planner_type planner;

   typedef uint8_t _replanning_enabled_type;
  _replanning_enabled_type replanning_enabled;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _world_type;
  _world_type world;

   typedef uint32_t _boot_time_type;
  _boot_time_type boot_time;





  typedef boost::shared_ptr< ::ff_msgs::AgentStateStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ff_msgs::AgentStateStamped_<ContainerAllocator> const> ConstPtr;

}; // struct AgentStateStamped_

typedef ::ff_msgs::AgentStateStamped_<std::allocator<void> > AgentStateStamped;

typedef boost::shared_ptr< ::ff_msgs::AgentStateStamped > AgentStateStampedPtr;
typedef boost::shared_ptr< ::ff_msgs::AgentStateStamped const> AgentStateStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ff_msgs::AgentStateStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ff_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ff_msgs': ['/home/isuru/Forked_astrobee/astrobee/src/communications/ff_msgs/msg', '/home/isuru/Forked_astrobee/astrobee/debian/devel/.private/ff_msgs/share/ff_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ff_msgs::AgentStateStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ff_msgs::AgentStateStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ff_msgs::AgentStateStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "156487b23e377e3a1dc7ef079f0e327d";
  }

  static const char* value(const ::ff_msgs::AgentStateStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x156487b23e377e3aULL;
  static const uint64_t static_value2 = 0x1dc7ef079f0e327dULL;
};

template<class ContainerAllocator>
struct DataType< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff_msgs/AgentStateStamped";
  }

  static const char* value(const ::ff_msgs::AgentStateStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# State of the Astrobee, based off of rapid::ext::astrobee::AgentState\n\
\n\
# Header with timestamp\n\
std_msgs/Header header\n\
\n\
# Operating state of the Astrobee\n\
ff_msgs/OpState operating_state\n\
\n\
# Plan execution state. State is idle when there is no plan to be executed. Once\n\
# a plan is uploaded, the state change to paused. Upon a run plan command, the\n\
# state will change to executing. If a stop or pause plan command is received or\n\
# a fault occurs, the state will be set to pause. Once the plan is completed,\n\
# the state will go back to idle\n\
ff_msgs/ExecState plan_execution_state\n\
\n\
# Guest science state. If a primary guest science apk is started, the state\n\
# will go from idle to executing. Once the primarty apk is finished, the state\n\
# will go back to idle\n\
ff_msgs/ExecState guest_science_state\n\
\n\
# Mobility state of the Astrobee\n\
ff_msgs/MobilityState mobility_state\n\
\n\
# Proximity to the dock when docking and undocking. Proximity to a handrail when\n\
# perching or unperching. 0 the rest of the time.\n\
float32 proximity\n\
\n\
# Name of profile configuration, i.e. Nominal, IgnoreObstacles, Faceforward,\n\
# Quiet, etc. Profiles specify stuff like target velocity and acceleration,\n\
# collision distance, etc.\n\
string profile_name\n\
\n\
#Defines GN&C gains, hard limits, tolerances, etc.\n\
string flight_mode\n\
\n\
# Maximum linear velocity to target while translating\n\
float32 target_linear_velocity\n\
# Maximum linear acceleration to target while translating\n\
float32 target_linear_accel\n\
# Maximum angular velocity to target while rotating\n\
float32 target_angular_velocity\n\
# Maximum angular acceleration to target while rotating\n\
float32 target_angular_accel\n\
# Minimum distance margin to maintain away from obstacles\n\
float32 collision_distance\n\
\n\
# Specifies whether the Astrobee is allowed to fly blind i.e. not faceforward\n\
bool holonomic_enabled\n\
\n\
# Specifies whether the Astrobee is checking for obstacles\n\
bool check_obstacles\n\
\n\
# Specifies whether the Astrobee is checking the keepin and keepout zones\n\
bool check_zones\n\
\n\
# Specifies whether the Astrobee is allowed to auto return. Please note,\n\
# Astrobee will only use this flags when deciding if it should auto return. If\n\
# the astrobee gets a command to auto return from the operator or guest science,\n\
# it will auto return without checking this flag\n\
bool auto_return_enabled\n\
\n\
# Specifies whether the choreographer should execute a segment immediately or\n\
# based on the time stamp in the segement\n\
bool immediate_enabled\n\
\n\
# Specifies the current planner being used\n\
string planner\n\
\n\
# Specifies whether re-planning is allowed\n\
bool replanning_enabled\n\
\n\
# Specifies the current world being used\n\
string world\n\
\n\
# Number of seconds since Unix Epoch\n\
uint32 boot_time\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ff_msgs/OpState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Operating States, based off of the enumeration constants\n\
# in rapid::ext::astrobee::AgentState.\n\
#\n\
# *MUST* be kept in sync with the DDS IDL file in astrobee_common\n\
\n\
uint8 READY            = 0  # Freeflyer is ready to accept commands\n\
uint8 PLAN_EXECUTION   = 1  # Freeflyer is executing a plan\n\
uint8 TELEOPERATION    = 2  # Freeflyer is executing a teleop command\n\
uint8 AUTO_RETURN      = 3  # Freeflyer is autonomously returning to the dock\n\
# The freeflyer is either executing a fault response or there is a fault\n\
# occurring in the system that prevents the freeflyer from moving\n\
uint8 FAULT            = 4\n\
\n\
# Operating state\n\
uint8 state\n\
\n\
================================================================================\n\
MSG: ff_msgs/ExecState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Execution States, based off of the enumeration constants in\n\
# rapid::ext::astrobee::AgentState\n\
#\n\
# *MUST* be kept in sync with the DDS IDL file in astrobee_common\n\
\n\
uint8 IDLE      = 0   # Process is idle\n\
uint8 EXECUTING = 1   # Process is executing\n\
uint8 PAUSED    = 2   # Process is paused\n\
uint8 ERROR     = 3   # Process encountered an error\n\
\n\
# Execution state\n\
uint8 state\n\
\n\
================================================================================\n\
MSG: ff_msgs/MobilityState\n\
# Copyright (c) 2017, United States Government, as represented by the\n\
# Administrator of the National Aeronautics and Space Administration.\n\
# \n\
# All rights reserved.\n\
# \n\
# The Astrobee platform is licensed under the Apache License, Version 2.0\n\
# (the \"License\"); you may not use this file except in compliance with the\n\
# License. You may obtain a copy of the License at\n\
# \n\
#     http://www.apache.org/licenses/LICENSE-2.0\n\
# \n\
# Unless required by applicable law or agreed to in writing, software\n\
# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n\
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n\
# License for the specific language governing permissions and limitations\n\
# under the License.\n\
#\n\
# Mobility states, based off the enumeration constants in\n\
# rapid::ext::astrobee::AgentState\n\
#\n\
# *MUST* be kept in sync with the DDS IDL file in astrobee_common\n\
\n\
uint8 DRIFTING        = 0   # Astrobee's propulsion is off\n\
uint8 STOPPING        = 1   # Astrobee is either stopping or stopped\n\
uint8 FLYING          = 2   # Astrobee is flying\n\
uint8 DOCKING         = 3   # Astrobee is either docking or undocking\n\
uint8 PERCHING        = 4   # Astrobee is either perching or unperching\n\
\n\
# Mobility state\n\
uint8 state\n\
\n\
# Specifies the progress of the action. For docking, this value can be N to -N\n\
# where N through 1 specifies the progress of a docking action, 0 is docked, and\n\
# -1 through -N specifies the process of an undocking action. For stopping, this\n\
# value is either 1 or 0 where 1 means the robot is coming to a stop and 0 means\n\
# the robot is stopped. For perching, this value can be N to -N where N through\n\
# 1 specifies the progress of a perching action, 0 is perched, and -1 through\n\
# -N specifies the process of an unperching action.\n\
int32 sub_state\n\
";
  }

  static const char* value(const ::ff_msgs::AgentStateStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.operating_state);
      stream.next(m.plan_execution_state);
      stream.next(m.guest_science_state);
      stream.next(m.mobility_state);
      stream.next(m.proximity);
      stream.next(m.profile_name);
      stream.next(m.flight_mode);
      stream.next(m.target_linear_velocity);
      stream.next(m.target_linear_accel);
      stream.next(m.target_angular_velocity);
      stream.next(m.target_angular_accel);
      stream.next(m.collision_distance);
      stream.next(m.holonomic_enabled);
      stream.next(m.check_obstacles);
      stream.next(m.check_zones);
      stream.next(m.auto_return_enabled);
      stream.next(m.immediate_enabled);
      stream.next(m.planner);
      stream.next(m.replanning_enabled);
      stream.next(m.world);
      stream.next(m.boot_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgentStateStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ff_msgs::AgentStateStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ff_msgs::AgentStateStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "operating_state: ";
    s << std::endl;
    Printer< ::ff_msgs::OpState_<ContainerAllocator> >::stream(s, indent + "  ", v.operating_state);
    s << indent << "plan_execution_state: ";
    s << std::endl;
    Printer< ::ff_msgs::ExecState_<ContainerAllocator> >::stream(s, indent + "  ", v.plan_execution_state);
    s << indent << "guest_science_state: ";
    s << std::endl;
    Printer< ::ff_msgs::ExecState_<ContainerAllocator> >::stream(s, indent + "  ", v.guest_science_state);
    s << indent << "mobility_state: ";
    s << std::endl;
    Printer< ::ff_msgs::MobilityState_<ContainerAllocator> >::stream(s, indent + "  ", v.mobility_state);
    s << indent << "proximity: ";
    Printer<float>::stream(s, indent + "  ", v.proximity);
    s << indent << "profile_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.profile_name);
    s << indent << "flight_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flight_mode);
    s << indent << "target_linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.target_linear_velocity);
    s << indent << "target_linear_accel: ";
    Printer<float>::stream(s, indent + "  ", v.target_linear_accel);
    s << indent << "target_angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.target_angular_velocity);
    s << indent << "target_angular_accel: ";
    Printer<float>::stream(s, indent + "  ", v.target_angular_accel);
    s << indent << "collision_distance: ";
    Printer<float>::stream(s, indent + "  ", v.collision_distance);
    s << indent << "holonomic_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.holonomic_enabled);
    s << indent << "check_obstacles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_obstacles);
    s << indent << "check_zones: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_zones);
    s << indent << "auto_return_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_return_enabled);
    s << indent << "immediate_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.immediate_enabled);
    s << indent << "planner: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planner);
    s << indent << "replanning_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.replanning_enabled);
    s << indent << "world: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.world);
    s << indent << "boot_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.boot_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FF_MSGS_MESSAGE_AGENTSTATESTAMPED_H
