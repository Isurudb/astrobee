// Generated by gencpp from file coordinator/StatusSecondary.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_STATUSSECONDARY_H
#define COORDINATOR_MESSAGE_STATUSSECONDARY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct StatusSecondary_
{
  typedef StatusSecondary_<ContainerAllocator> Type;

  StatusSecondary_()
    : stamp()
    , test_number(0)
    , default_control(false)
    , flight_mode()
    , test_finished(false)
    , coord_ok(false)  {
    }
  StatusSecondary_(const ContainerAllocator& _alloc)
    : stamp()
    , test_number(0)
    , default_control(false)
    , flight_mode(_alloc)
    , test_finished(false)
    , coord_ok(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _test_number_type;
  _test_number_type test_number;

   typedef uint8_t _default_control_type;
  _default_control_type default_control;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flight_mode_type;
  _flight_mode_type flight_mode;

   typedef uint8_t _test_finished_type;
  _test_finished_type test_finished;

   typedef uint8_t _coord_ok_type;
  _coord_ok_type coord_ok;





  typedef boost::shared_ptr< ::coordinator::StatusSecondary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::StatusSecondary_<ContainerAllocator> const> ConstPtr;

}; // struct StatusSecondary_

typedef ::coordinator::StatusSecondary_<std::allocator<void> > StatusSecondary;

typedef boost::shared_ptr< ::coordinator::StatusSecondary > StatusSecondaryPtr;
typedef boost::shared_ptr< ::coordinator::StatusSecondary const> StatusSecondaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::StatusSecondary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::StatusSecondary_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coordinator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'coordinator': ['/home/isuru/Forked_astrobee/astrobee/src/asap/coordinator/msg'], 'std_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/home/isuru/arm_cross/rootfs/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::StatusSecondary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::StatusSecondary_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::StatusSecondary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::StatusSecondary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::StatusSecondary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::StatusSecondary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::StatusSecondary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73edc0983b4cd83de63e2948253578db";
  }

  static const char* value(const ::coordinator::StatusSecondary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73edc0983b4cd83dULL;
  static const uint64_t static_value2 = 0xe63e2948253578dbULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::StatusSecondary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/StatusSecondary";
  }

  static const char* value(const ::coordinator::StatusSecondary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::StatusSecondary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
\n\
# base (shared) values\n\
int32 test_number\n\
bool default_control\n\
string flight_mode\n\
bool test_finished\n\
bool coord_ok\n\
\n\
# StatusSecondary\n\
";
  }

  static const char* value(const ::coordinator::StatusSecondary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::StatusSecondary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.test_number);
      stream.next(m.default_control);
      stream.next(m.flight_mode);
      stream.next(m.test_finished);
      stream.next(m.coord_ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusSecondary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::StatusSecondary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::StatusSecondary_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "test_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.test_number);
    s << indent << "default_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.default_control);
    s << indent << "flight_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flight_mode);
    s << indent << "test_finished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test_finished);
    s << indent << "coord_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coord_ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_STATUSSECONDARY_H
