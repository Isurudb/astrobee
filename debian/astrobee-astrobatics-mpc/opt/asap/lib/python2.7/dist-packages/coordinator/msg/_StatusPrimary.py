# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from coordinator/StatusPrimary.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class StatusPrimary(genpy.Message):
  _md5sum = "7b1f7333b81ba92ccdc2c10a9400c075"
  _type = "coordinator/StatusPrimary"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp

# base (shared) values
int32 test_number
bool default_control
string flight_mode
bool test_finished
bool coord_ok

# StatusPrimary
string control_mode  # did something break?
bool regulate_finished
string description  # for telemetry description
"""
  __slots__ = ['stamp','test_number','default_control','flight_mode','test_finished','coord_ok','control_mode','regulate_finished','description']
  _slot_types = ['time','int32','bool','string','bool','bool','string','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,test_number,default_control,flight_mode,test_finished,coord_ok,control_mode,regulate_finished,description

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusPrimary, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.test_number is None:
        self.test_number = 0
      if self.default_control is None:
        self.default_control = False
      if self.flight_mode is None:
        self.flight_mode = ''
      if self.test_finished is None:
        self.test_finished = False
      if self.coord_ok is None:
        self.coord_ok = False
      if self.control_mode is None:
        self.control_mode = ''
      if self.regulate_finished is None:
        self.regulate_finished = False
      if self.description is None:
        self.description = ''
    else:
      self.stamp = genpy.Time()
      self.test_number = 0
      self.default_control = False
      self.flight_mode = ''
      self.test_finished = False
      self.coord_ok = False
      self.control_mode = ''
      self.regulate_finished = False
      self.description = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IiB().pack(_x.stamp.secs, _x.stamp.nsecs, _x.test_number, _x.default_control))
      _x = self.flight_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.test_finished, _x.coord_ok))
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.regulate_finished))
      _x = self.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.stamp.secs, _x.stamp.nsecs, _x.test_number, _x.default_control,) = _get_struct_2IiB().unpack(str[start:end])
      self.default_control = bool(self.default_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode = str[start:end].decode('utf-8')
      else:
        self.flight_mode = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.test_finished, _x.coord_ok,) = _get_struct_2B().unpack(str[start:end])
      self.test_finished = bool(self.test_finished)
      self.coord_ok = bool(self.coord_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8')
      else:
        self.control_mode = str[start:end]
      start = end
      end += 1
      (self.regulate_finished,) = _get_struct_B().unpack(str[start:end])
      self.regulate_finished = bool(self.regulate_finished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.description = str[start:end].decode('utf-8')
      else:
        self.description = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IiB().pack(_x.stamp.secs, _x.stamp.nsecs, _x.test_number, _x.default_control))
      _x = self.flight_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.test_finished, _x.coord_ok))
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.regulate_finished))
      _x = self.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.stamp.secs, _x.stamp.nsecs, _x.test_number, _x.default_control,) = _get_struct_2IiB().unpack(str[start:end])
      self.default_control = bool(self.default_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode = str[start:end].decode('utf-8')
      else:
        self.flight_mode = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.test_finished, _x.coord_ok,) = _get_struct_2B().unpack(str[start:end])
      self.test_finished = bool(self.test_finished)
      self.coord_ok = bool(self.coord_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8')
      else:
        self.control_mode = str[start:end]
      start = end
      end += 1
      (self.regulate_finished,) = _get_struct_B().unpack(str[start:end])
      self.regulate_finished = bool(self.regulate_finished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.description = str[start:end].decode('utf-8')
      else:
        self.description = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IiB = None
def _get_struct_2IiB():
    global _struct_2IiB
    if _struct_2IiB is None:
        _struct_2IiB = struct.Struct("<2IiB")
    return _struct_2IiB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
